{"ast":null,"code":"import * as React from 'react';\nimport { getIntrinsicElementProps, useMergedRefs, slot } from '@fluentui/react-utilities';\nimport { useFocusableGroup, useFocusWithin } from '@fluentui/react-tabster';\nimport { useCardSelectable } from './useCardSelectable';\nimport { cardContextDefaultValue } from './CardContext';\nconst focusMap = {\n  off: undefined,\n  'no-tab': 'limited-trap-focus',\n  'tab-exit': 'limited',\n  'tab-only': 'unlimited'\n};\n/**\n * Create the state for interactive cards.\n *\n * This internal hook defines if the card is interactive\n * and control focus properties based on that.\n *\n * @param props - props from this instance of Card\n */\nconst useCardInteractive = ({\n  focusMode = 'off',\n  ...props\n}) => {\n  const interactive = ['onClick', 'onDoubleClick', 'onMouseUp', 'onMouseDown', 'onPointerUp', 'onPointerDown', 'onTouchStart', 'onTouchEnd', 'onDragStart', 'onDragEnd'].some(prop => props[prop]);\n  const groupperAttrs = useFocusableGroup({\n    tabBehavior: focusMap[interactive ? 'no-tab' : focusMode]\n  });\n  const interactiveFocusAttributes = {\n    ...groupperAttrs,\n    tabIndex: 0\n  };\n  return {\n    interactive,\n    focusAttributes: !interactive && focusMode === 'off' ? null : interactiveFocusAttributes\n  };\n};\n/**\n * Create the state required to render Card.\n *\n * The returned state can be modified with hooks such as useCardStyles_unstable,\n * before being passed to renderCard_unstable.\n *\n * @param props - props from this instance of Card\n * @param ref - reference to the root element of Card\n */\nexport const useCard_unstable = (props, ref) => {\n  const {\n    appearance = 'filled',\n    orientation = 'vertical',\n    size = 'medium'\n  } = props;\n  const [referenceId, setReferenceId] = React.useState(cardContextDefaultValue.selectableA11yProps.referenceId);\n  const [referenceLabel, setReferenceLabel] = React.useState(cardContextDefaultValue.selectableA11yProps.referenceId);\n  const cardBaseRef = useFocusWithin();\n  const {\n    selectable,\n    selected,\n    selectableCardProps,\n    selectFocused,\n    checkboxSlot,\n    floatingActionSlot\n  } = useCardSelectable(props, {\n    referenceId,\n    referenceLabel\n  }, cardBaseRef);\n  const cardRef = useMergedRefs(cardBaseRef, ref);\n  const {\n    interactive,\n    focusAttributes\n  } = useCardInteractive(props);\n  return {\n    appearance,\n    orientation,\n    size,\n    interactive,\n    selectable,\n    selectFocused,\n    selected,\n    selectableA11yProps: {\n      setReferenceId,\n      referenceId,\n      referenceLabel,\n      setReferenceLabel\n    },\n    components: {\n      root: 'div',\n      floatingAction: 'div',\n      checkbox: 'input'\n    },\n    root: slot.always(getIntrinsicElementProps('div', {\n      ref: cardRef,\n      role: 'group',\n      ...(!selectable ? focusAttributes : null),\n      ...props,\n      ...selectableCardProps\n    }), {\n      elementType: 'div'\n    }),\n    floatingAction: floatingActionSlot,\n    checkbox: checkboxSlot\n  };\n};","map":{"version":3,"names":["React","getIntrinsicElementProps","useMergedRefs","slot","useFocusableGroup","useFocusWithin","useCardSelectable","cardContextDefaultValue","focusMap","off","undefined","useCardInteractive","focusMode","props","interactive","some","prop","groupperAttrs","tabBehavior","interactiveFocusAttributes","tabIndex","focusAttributes","useCard_unstable","ref","appearance","orientation","size","referenceId","setReferenceId","useState","selectableA11yProps","referenceLabel","setReferenceLabel","cardBaseRef","selectable","selected","selectableCardProps","selectFocused","checkboxSlot","floatingActionSlot","cardRef","components","root","floatingAction","checkbox","always","role","elementType"],"sources":["D:/shubh/invezza-hrm/node_modules/@fluentui/react-card/lib/components/Card/useCard.js"],"sourcesContent":["import * as React from 'react';\nimport { getIntrinsicElementProps, useMergedRefs, slot } from '@fluentui/react-utilities';\nimport { useFocusableGroup, useFocusWithin } from '@fluentui/react-tabster';\nimport { useCardSelectable } from './useCardSelectable';\nimport { cardContextDefaultValue } from './CardContext';\nconst focusMap = {\n    off: undefined,\n    'no-tab': 'limited-trap-focus',\n    'tab-exit': 'limited',\n    'tab-only': 'unlimited'\n};\n/**\n * Create the state for interactive cards.\n *\n * This internal hook defines if the card is interactive\n * and control focus properties based on that.\n *\n * @param props - props from this instance of Card\n */ const useCardInteractive = ({ focusMode = 'off', ...props })=>{\n    const interactive = [\n        'onClick',\n        'onDoubleClick',\n        'onMouseUp',\n        'onMouseDown',\n        'onPointerUp',\n        'onPointerDown',\n        'onTouchStart',\n        'onTouchEnd',\n        'onDragStart',\n        'onDragEnd'\n    ].some((prop)=>props[prop]);\n    const groupperAttrs = useFocusableGroup({\n        tabBehavior: focusMap[interactive ? 'no-tab' : focusMode]\n    });\n    const interactiveFocusAttributes = {\n        ...groupperAttrs,\n        tabIndex: 0\n    };\n    return {\n        interactive,\n        focusAttributes: !interactive && focusMode === 'off' ? null : interactiveFocusAttributes\n    };\n};\n/**\n * Create the state required to render Card.\n *\n * The returned state can be modified with hooks such as useCardStyles_unstable,\n * before being passed to renderCard_unstable.\n *\n * @param props - props from this instance of Card\n * @param ref - reference to the root element of Card\n */ export const useCard_unstable = (props, ref)=>{\n    const { appearance = 'filled', orientation = 'vertical', size = 'medium' } = props;\n    const [referenceId, setReferenceId] = React.useState(cardContextDefaultValue.selectableA11yProps.referenceId);\n    const [referenceLabel, setReferenceLabel] = React.useState(cardContextDefaultValue.selectableA11yProps.referenceId);\n    const cardBaseRef = useFocusWithin();\n    const { selectable, selected, selectableCardProps, selectFocused, checkboxSlot, floatingActionSlot } = useCardSelectable(props, {\n        referenceId,\n        referenceLabel\n    }, cardBaseRef);\n    const cardRef = useMergedRefs(cardBaseRef, ref);\n    const { interactive, focusAttributes } = useCardInteractive(props);\n    return {\n        appearance,\n        orientation,\n        size,\n        interactive,\n        selectable,\n        selectFocused,\n        selected,\n        selectableA11yProps: {\n            setReferenceId,\n            referenceId,\n            referenceLabel,\n            setReferenceLabel\n        },\n        components: {\n            root: 'div',\n            floatingAction: 'div',\n            checkbox: 'input'\n        },\n        root: slot.always(getIntrinsicElementProps('div', {\n            ref: cardRef,\n            role: 'group',\n            ...!selectable ? focusAttributes : null,\n            ...props,\n            ...selectableCardProps\n        }), {\n            elementType: 'div'\n        }),\n        floatingAction: floatingActionSlot,\n        checkbox: checkboxSlot\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}