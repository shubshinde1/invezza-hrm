{"ast":null,"code":"import { size } from '@floating-ui/dom';\nimport { getBoundary } from '../utils/getBoundary';\n/**\n * floating-ui `size` middleware uses floating element's height/width to calculate available height/width.\n * This middleware only runs once per lifecycle, resetting styles applied by maxSize from previous lifecycle.\n * Then floating element's original size is restored and `size` middleware can calculate available height/width correctly.\n */\nexport const resetMaxSize = autoSize => ({\n  name: 'resetMaxSize',\n  fn({\n    middlewareData,\n    elements\n  }) {\n    var _middlewareData_resetMaxSize;\n    if ((_middlewareData_resetMaxSize = middlewareData.resetMaxSize) === null || _middlewareData_resetMaxSize === void 0 ? void 0 : _middlewareData_resetMaxSize.maxSizeAlreadyReset) {\n      return {};\n    }\n    const {\n      applyMaxWidth,\n      applyMaxHeight\n    } = autoSize;\n    if (applyMaxWidth) {\n      elements.floating.style.removeProperty('box-sizing');\n      elements.floating.style.removeProperty('max-width');\n      elements.floating.style.removeProperty('width');\n    }\n    if (applyMaxHeight) {\n      elements.floating.style.removeProperty('box-sizing');\n      elements.floating.style.removeProperty('max-height');\n      elements.floating.style.removeProperty('height');\n    }\n    return {\n      data: {\n        maxSizeAlreadyReset: true\n      },\n      reset: {\n        rects: true\n      }\n    };\n  }\n});\nexport function maxSize(autoSize, options) {\n  const {\n    container,\n    overflowBoundary\n  } = options;\n  return size({\n    ...(overflowBoundary && {\n      altBoundary: true,\n      boundary: getBoundary(container, overflowBoundary)\n    }),\n    apply({\n      availableHeight,\n      availableWidth,\n      elements,\n      rects\n    }) {\n      const applyMaxSizeStyles = (apply, dimension, availableSize) => {\n        if (!apply) {\n          return;\n        }\n        elements.floating.style.setProperty('box-sizing', 'border-box');\n        elements.floating.style.setProperty(`max-${dimension}`, `${availableSize}px`);\n        if (rects.floating[dimension] > availableSize) {\n          elements.floating.style.setProperty(dimension, `${availableSize}px`);\n          const axis = dimension === 'width' ? 'x' : 'y';\n          if (!elements.floating.style.getPropertyValue(`overflow-${axis}`)) {\n            elements.floating.style.setProperty(`overflow-${axis}`, 'auto');\n          }\n        }\n      };\n      const {\n        applyMaxWidth,\n        applyMaxHeight\n      } = autoSize;\n      applyMaxSizeStyles(applyMaxWidth, 'width', availableWidth);\n      applyMaxSizeStyles(applyMaxHeight, 'height', availableHeight);\n    }\n  });\n}","map":{"version":3,"names":["size","getBoundary","resetMaxSize","autoSize","name","fn","middlewareData","elements","_middlewareData_resetMaxSize","maxSizeAlreadyReset","applyMaxWidth","applyMaxHeight","floating","style","removeProperty","data","reset","rects","maxSize","options","container","overflowBoundary","altBoundary","boundary","apply","availableHeight","availableWidth","applyMaxSizeStyles","dimension","availableSize","setProperty","axis","getPropertyValue"],"sources":["D:/shubh/invezza-hrm/node_modules/@fluentui/react-positioning/lib/middleware/maxSize.js"],"sourcesContent":["import { size } from '@floating-ui/dom';\nimport { getBoundary } from '../utils/getBoundary';\n/**\n * floating-ui `size` middleware uses floating element's height/width to calculate available height/width.\n * This middleware only runs once per lifecycle, resetting styles applied by maxSize from previous lifecycle.\n * Then floating element's original size is restored and `size` middleware can calculate available height/width correctly.\n */ export const resetMaxSize = (autoSize)=>({\n        name: 'resetMaxSize',\n        fn ({ middlewareData, elements }) {\n            var _middlewareData_resetMaxSize;\n            if ((_middlewareData_resetMaxSize = middlewareData.resetMaxSize) === null || _middlewareData_resetMaxSize === void 0 ? void 0 : _middlewareData_resetMaxSize.maxSizeAlreadyReset) {\n                return {};\n            }\n            const { applyMaxWidth, applyMaxHeight } = autoSize;\n            if (applyMaxWidth) {\n                elements.floating.style.removeProperty('box-sizing');\n                elements.floating.style.removeProperty('max-width');\n                elements.floating.style.removeProperty('width');\n            }\n            if (applyMaxHeight) {\n                elements.floating.style.removeProperty('box-sizing');\n                elements.floating.style.removeProperty('max-height');\n                elements.floating.style.removeProperty('height');\n            }\n            return {\n                data: {\n                    maxSizeAlreadyReset: true\n                },\n                reset: {\n                    rects: true\n                }\n            };\n        }\n    });\nexport function maxSize(autoSize, options) {\n    const { container, overflowBoundary } = options;\n    return size({\n        ...overflowBoundary && {\n            altBoundary: true,\n            boundary: getBoundary(container, overflowBoundary)\n        },\n        apply ({ availableHeight, availableWidth, elements, rects }) {\n            const applyMaxSizeStyles = (apply, dimension, availableSize)=>{\n                if (!apply) {\n                    return;\n                }\n                elements.floating.style.setProperty('box-sizing', 'border-box');\n                elements.floating.style.setProperty(`max-${dimension}`, `${availableSize}px`);\n                if (rects.floating[dimension] > availableSize) {\n                    elements.floating.style.setProperty(dimension, `${availableSize}px`);\n                    const axis = dimension === 'width' ? 'x' : 'y';\n                    if (!elements.floating.style.getPropertyValue(`overflow-${axis}`)) {\n                        elements.floating.style.setProperty(`overflow-${axis}`, 'auto');\n                    }\n                }\n            };\n            const { applyMaxWidth, applyMaxHeight } = autoSize;\n            applyMaxSizeStyles(applyMaxWidth, 'width', availableWidth);\n            applyMaxSizeStyles(applyMaxHeight, 'height', availableHeight);\n        }\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}