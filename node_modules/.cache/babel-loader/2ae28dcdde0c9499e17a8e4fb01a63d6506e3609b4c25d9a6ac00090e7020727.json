{"ast":null,"code":"import * as React from 'react';\nimport { getIntrinsicElementProps, slot } from '@fluentui/react-utilities';\nimport { useDialogContext_unstable } from '../../contexts/dialogContext';\nimport { Dismiss20Regular } from '@fluentui/react-icons';\nimport { DialogTrigger } from '../DialogTrigger/DialogTrigger';\nimport { useDialogTitleInternalStyles } from './useDialogTitleStyles.styles';\n/**\n * Create the state required to render DialogTitle.\n *\n * The returned state can be modified with hooks such as useDialogTitleStyles_unstable,\n * before being passed to renderDialogTitle_unstable.\n *\n * @param props - props from this instance of DialogTitle\n * @param ref - reference to root HTMLElement of DialogTitle\n */\nexport const useDialogTitle_unstable = (props, ref) => {\n  const {\n    action\n  } = props;\n  const modalType = useDialogContext_unstable(ctx => ctx.modalType);\n  const internalStyles = useDialogTitleInternalStyles();\n  return {\n    components: {\n      root: 'h2',\n      action: 'div'\n    },\n    root: slot.always(getIntrinsicElementProps('h2', {\n      ref,\n      id: useDialogContext_unstable(ctx => ctx.dialogTitleId),\n      ...props\n    }), {\n      elementType: 'h2'\n    }),\n    action: slot.optional(action, {\n      renderByDefault: modalType === 'non-modal',\n      defaultProps: {\n        children: /*#__PURE__*/React.createElement(DialogTrigger, {\n          disableButtonEnhancement: true,\n          action: \"close\"\n        }, /*#__PURE__*/React.createElement(\"button\", {\n          type: \"button\",\n          className: internalStyles,\n          // TODO: find a better way to add internal labels\n          \"aria-label\": \"close\"\n        }, /*#__PURE__*/React.createElement(Dismiss20Regular, null)))\n      },\n      elementType: 'div'\n    })\n  };\n};","map":{"version":3,"names":["React","getIntrinsicElementProps","slot","useDialogContext_unstable","Dismiss20Regular","DialogTrigger","useDialogTitleInternalStyles","useDialogTitle_unstable","props","ref","action","modalType","ctx","internalStyles","components","root","always","id","dialogTitleId","elementType","optional","renderByDefault","defaultProps","children","createElement","disableButtonEnhancement","type","className"],"sources":["D:/shubh/invezza-hrm/node_modules/@fluentui/react-dialog/lib/components/DialogTitle/useDialogTitle.js"],"sourcesContent":["import * as React from 'react';\nimport { getIntrinsicElementProps, slot } from '@fluentui/react-utilities';\nimport { useDialogContext_unstable } from '../../contexts/dialogContext';\nimport { Dismiss20Regular } from '@fluentui/react-icons';\nimport { DialogTrigger } from '../DialogTrigger/DialogTrigger';\nimport { useDialogTitleInternalStyles } from './useDialogTitleStyles.styles';\n/**\n * Create the state required to render DialogTitle.\n *\n * The returned state can be modified with hooks such as useDialogTitleStyles_unstable,\n * before being passed to renderDialogTitle_unstable.\n *\n * @param props - props from this instance of DialogTitle\n * @param ref - reference to root HTMLElement of DialogTitle\n */ export const useDialogTitle_unstable = (props, ref)=>{\n    const { action } = props;\n    const modalType = useDialogContext_unstable((ctx)=>ctx.modalType);\n    const internalStyles = useDialogTitleInternalStyles();\n    return {\n        components: {\n            root: 'h2',\n            action: 'div'\n        },\n        root: slot.always(getIntrinsicElementProps('h2', {\n            ref,\n            id: useDialogContext_unstable((ctx)=>ctx.dialogTitleId),\n            ...props\n        }), {\n            elementType: 'h2'\n        }),\n        action: slot.optional(action, {\n            renderByDefault: modalType === 'non-modal',\n            defaultProps: {\n                children: /*#__PURE__*/ React.createElement(DialogTrigger, {\n                    disableButtonEnhancement: true,\n                    action: \"close\"\n                }, /*#__PURE__*/ React.createElement(\"button\", {\n                    type: \"button\",\n                    className: internalStyles,\n                    // TODO: find a better way to add internal labels\n                    \"aria-label\": \"close\"\n                }, /*#__PURE__*/ React.createElement(Dismiss20Regular, null)))\n            },\n            elementType: 'div'\n        })\n    };\n};\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,wBAAwB,EAAEC,IAAI,QAAQ,2BAA2B;AAC1E,SAASC,yBAAyB,QAAQ,8BAA8B;AACxE,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,SAASC,aAAa,QAAQ,gCAAgC;AAC9D,SAASC,4BAA4B,QAAQ,+BAA+B;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAI,OAAO,MAAMC,uBAAuB,GAAGA,CAACC,KAAK,EAAEC,GAAG,KAAG;EACrD,MAAM;IAAEC;EAAO,CAAC,GAAGF,KAAK;EACxB,MAAMG,SAAS,GAAGR,yBAAyB,CAAES,GAAG,IAAGA,GAAG,CAACD,SAAS,CAAC;EACjE,MAAME,cAAc,GAAGP,4BAA4B,CAAC,CAAC;EACrD,OAAO;IACHQ,UAAU,EAAE;MACRC,IAAI,EAAE,IAAI;MACVL,MAAM,EAAE;IACZ,CAAC;IACDK,IAAI,EAAEb,IAAI,CAACc,MAAM,CAACf,wBAAwB,CAAC,IAAI,EAAE;MAC7CQ,GAAG;MACHQ,EAAE,EAAEd,yBAAyB,CAAES,GAAG,IAAGA,GAAG,CAACM,aAAa,CAAC;MACvD,GAAGV;IACP,CAAC,CAAC,EAAE;MACAW,WAAW,EAAE;IACjB,CAAC,CAAC;IACFT,MAAM,EAAER,IAAI,CAACkB,QAAQ,CAACV,MAAM,EAAE;MAC1BW,eAAe,EAAEV,SAAS,KAAK,WAAW;MAC1CW,YAAY,EAAE;QACVC,QAAQ,EAAE,aAAcvB,KAAK,CAACwB,aAAa,CAACnB,aAAa,EAAE;UACvDoB,wBAAwB,EAAE,IAAI;UAC9Bf,MAAM,EAAE;QACZ,CAAC,EAAE,aAAcV,KAAK,CAACwB,aAAa,CAAC,QAAQ,EAAE;UAC3CE,IAAI,EAAE,QAAQ;UACdC,SAAS,EAAEd,cAAc;UACzB;UACA,YAAY,EAAE;QAClB,CAAC,EAAE,aAAcb,KAAK,CAACwB,aAAa,CAACpB,gBAAgB,EAAE,IAAI,CAAC,CAAC;MACjE,CAAC;MACDe,WAAW,EAAE;IACjB,CAAC;EACL,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}