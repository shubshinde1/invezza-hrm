{"ast":null,"code":"import * as React from 'react';\nimport { useFieldControlProps_unstable } from '@fluentui/react-field';\nimport { getPartitionedNativeProps, useEventCallback, slot } from '@fluentui/react-utilities';\nimport { ChevronDownRegular } from '@fluentui/react-icons';\nimport { useOverrides_unstable as useOverrides } from '@fluentui/react-shared-contexts';\n/**\n * Create the state required to render Select.\n *\n * The returned state can be modified with hooks such as useSelectStyles,\n * before being passed to renderSelect.\n *\n * @param props - props from this instance of Select\n * @param ref - reference to the `<select>` element in Select\n */\nexport const useSelect_unstable = (props, ref) => {\n  // Merge props from surrounding <Field>, if any\n  props = useFieldControlProps_unstable(props, {\n    supportsLabelFor: true,\n    supportsRequired: true,\n    supportsSize: true\n  });\n  const overrides = useOverrides();\n  var _overrides_inputDefaultAppearance;\n  const {\n    defaultValue,\n    value,\n    select,\n    icon,\n    root,\n    appearance = (_overrides_inputDefaultAppearance = overrides.inputDefaultAppearance) !== null && _overrides_inputDefaultAppearance !== void 0 ? _overrides_inputDefaultAppearance : 'outline',\n    onChange,\n    size = 'medium'\n  } = props;\n  const nativeProps = getPartitionedNativeProps({\n    props,\n    primarySlotTagName: 'select',\n    excludedPropNames: ['appearance', 'defaultValue', 'onChange', 'size', 'value']\n  });\n  const state = {\n    size,\n    appearance,\n    components: {\n      root: 'span',\n      select: 'select',\n      icon: 'span'\n    },\n    select: slot.always(select, {\n      defaultProps: {\n        defaultValue,\n        value,\n        ref,\n        ...nativeProps.primary\n      },\n      elementType: 'select'\n    }),\n    icon: slot.optional(icon, {\n      renderByDefault: true,\n      defaultProps: {\n        children: /*#__PURE__*/React.createElement(ChevronDownRegular, null)\n      },\n      elementType: 'span'\n    }),\n    root: slot.always(root, {\n      defaultProps: nativeProps.root,\n      elementType: 'span'\n    })\n  };\n  state.select.onChange = useEventCallback(event => {\n    onChange === null || onChange === void 0 ? void 0 : onChange(event, {\n      value: event.target.value\n    });\n  });\n  return state;\n};","map":{"version":3,"names":["React","useFieldControlProps_unstable","getPartitionedNativeProps","useEventCallback","slot","ChevronDownRegular","useOverrides_unstable","useOverrides","useSelect_unstable","props","ref","supportsLabelFor","supportsRequired","supportsSize","overrides","_overrides_inputDefaultAppearance","defaultValue","value","select","icon","root","appearance","inputDefaultAppearance","onChange","size","nativeProps","primarySlotTagName","excludedPropNames","state","components","always","defaultProps","primary","elementType","optional","renderByDefault","children","createElement","event","target"],"sources":["D:/shubh/invezza-hrm/node_modules/@fluentui/react-select/lib/components/Select/useSelect.js"],"sourcesContent":["import * as React from 'react';\nimport { useFieldControlProps_unstable } from '@fluentui/react-field';\nimport { getPartitionedNativeProps, useEventCallback, slot } from '@fluentui/react-utilities';\nimport { ChevronDownRegular } from '@fluentui/react-icons';\nimport { useOverrides_unstable as useOverrides } from '@fluentui/react-shared-contexts';\n/**\n * Create the state required to render Select.\n *\n * The returned state can be modified with hooks such as useSelectStyles,\n * before being passed to renderSelect.\n *\n * @param props - props from this instance of Select\n * @param ref - reference to the `<select>` element in Select\n */ export const useSelect_unstable = (props, ref)=>{\n    // Merge props from surrounding <Field>, if any\n    props = useFieldControlProps_unstable(props, {\n        supportsLabelFor: true,\n        supportsRequired: true,\n        supportsSize: true\n    });\n    const overrides = useOverrides();\n    var _overrides_inputDefaultAppearance;\n    const { defaultValue, value, select, icon, root, appearance = (_overrides_inputDefaultAppearance = overrides.inputDefaultAppearance) !== null && _overrides_inputDefaultAppearance !== void 0 ? _overrides_inputDefaultAppearance : 'outline', onChange, size = 'medium' } = props;\n    const nativeProps = getPartitionedNativeProps({\n        props,\n        primarySlotTagName: 'select',\n        excludedPropNames: [\n            'appearance',\n            'defaultValue',\n            'onChange',\n            'size',\n            'value'\n        ]\n    });\n    const state = {\n        size,\n        appearance,\n        components: {\n            root: 'span',\n            select: 'select',\n            icon: 'span'\n        },\n        select: slot.always(select, {\n            defaultProps: {\n                defaultValue,\n                value,\n                ref,\n                ...nativeProps.primary\n            },\n            elementType: 'select'\n        }),\n        icon: slot.optional(icon, {\n            renderByDefault: true,\n            defaultProps: {\n                children: /*#__PURE__*/ React.createElement(ChevronDownRegular, null)\n            },\n            elementType: 'span'\n        }),\n        root: slot.always(root, {\n            defaultProps: nativeProps.root,\n            elementType: 'span'\n        })\n    };\n    state.select.onChange = useEventCallback((event)=>{\n        onChange === null || onChange === void 0 ? void 0 : onChange(event, {\n            value: event.target.value\n        });\n    });\n    return state;\n};\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,6BAA6B,QAAQ,uBAAuB;AACrE,SAASC,yBAAyB,EAAEC,gBAAgB,EAAEC,IAAI,QAAQ,2BAA2B;AAC7F,SAASC,kBAAkB,QAAQ,uBAAuB;AAC1D,SAASC,qBAAqB,IAAIC,YAAY,QAAQ,iCAAiC;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAI,OAAO,MAAMC,kBAAkB,GAAGA,CAACC,KAAK,EAAEC,GAAG,KAAG;EAChD;EACAD,KAAK,GAAGR,6BAA6B,CAACQ,KAAK,EAAE;IACzCE,gBAAgB,EAAE,IAAI;IACtBC,gBAAgB,EAAE,IAAI;IACtBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF,MAAMC,SAAS,GAAGP,YAAY,CAAC,CAAC;EAChC,IAAIQ,iCAAiC;EACrC,MAAM;IAAEC,YAAY;IAAEC,KAAK;IAAEC,MAAM;IAAEC,IAAI;IAAEC,IAAI;IAAEC,UAAU,GAAG,CAACN,iCAAiC,GAAGD,SAAS,CAACQ,sBAAsB,MAAM,IAAI,IAAIP,iCAAiC,KAAK,KAAK,CAAC,GAAGA,iCAAiC,GAAG,SAAS;IAAEQ,QAAQ;IAAEC,IAAI,GAAG;EAAS,CAAC,GAAGf,KAAK;EAClR,MAAMgB,WAAW,GAAGvB,yBAAyB,CAAC;IAC1CO,KAAK;IACLiB,kBAAkB,EAAE,QAAQ;IAC5BC,iBAAiB,EAAE,CACf,YAAY,EACZ,cAAc,EACd,UAAU,EACV,MAAM,EACN,OAAO;EAEf,CAAC,CAAC;EACF,MAAMC,KAAK,GAAG;IACVJ,IAAI;IACJH,UAAU;IACVQ,UAAU,EAAE;MACRT,IAAI,EAAE,MAAM;MACZF,MAAM,EAAE,QAAQ;MAChBC,IAAI,EAAE;IACV,CAAC;IACDD,MAAM,EAAEd,IAAI,CAAC0B,MAAM,CAACZ,MAAM,EAAE;MACxBa,YAAY,EAAE;QACVf,YAAY;QACZC,KAAK;QACLP,GAAG;QACH,GAAGe,WAAW,CAACO;MACnB,CAAC;MACDC,WAAW,EAAE;IACjB,CAAC,CAAC;IACFd,IAAI,EAAEf,IAAI,CAAC8B,QAAQ,CAACf,IAAI,EAAE;MACtBgB,eAAe,EAAE,IAAI;MACrBJ,YAAY,EAAE;QACVK,QAAQ,EAAE,aAAcpC,KAAK,CAACqC,aAAa,CAAChC,kBAAkB,EAAE,IAAI;MACxE,CAAC;MACD4B,WAAW,EAAE;IACjB,CAAC,CAAC;IACFb,IAAI,EAAEhB,IAAI,CAAC0B,MAAM,CAACV,IAAI,EAAE;MACpBW,YAAY,EAAEN,WAAW,CAACL,IAAI;MAC9Ba,WAAW,EAAE;IACjB,CAAC;EACL,CAAC;EACDL,KAAK,CAACV,MAAM,CAACK,QAAQ,GAAGpB,gBAAgB,CAAEmC,KAAK,IAAG;IAC9Cf,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACe,KAAK,EAAE;MAChErB,KAAK,EAAEqB,KAAK,CAACC,MAAM,CAACtB;IACxB,CAAC,CAAC;EACN,CAAC,CAAC;EACF,OAAOW,KAAK;AAChB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}