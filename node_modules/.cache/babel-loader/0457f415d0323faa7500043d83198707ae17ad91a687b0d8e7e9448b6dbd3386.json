{"ast":null,"code":"import * as React from 'react';\nimport { getIntrinsicElementProps, slot } from '@fluentui/react-utilities';\nimport { useTableContext } from '../../contexts/tableContext';\n/**\n * Create the state required to render TableCell.\n *\n * The returned state can be modified with hooks such as useTableCellStyles_unstable,\n * before being passed to renderTableCell_unstable.\n *\n * @param props - props from this instance of TableCell\n * @param ref - reference to root HTMLElement of TableCell\n */\nexport const useTableCell_unstable = (props, ref) => {\n  const {\n    noNativeElements,\n    size\n  } = useTableContext();\n  var _props_as;\n  const rootComponent = ((_props_as = props.as) !== null && _props_as !== void 0 ? _props_as : noNativeElements) ? 'div' : 'td';\n  return {\n    components: {\n      root: rootComponent\n    },\n    root: slot.always(getIntrinsicElementProps(rootComponent, {\n      // FIXME:\n      // `ref` is wrongly assigned to be `HTMLElement` instead of `HTMLDivElement`\n      // but since it would be a breaking change to fix it, we are casting ref to it's proper type\n      ref: ref,\n      role: rootComponent === 'div' ? 'cell' : undefined,\n      ...props\n    }), {\n      elementType: rootComponent\n    }),\n    noNativeElements,\n    size\n  };\n};","map":{"version":3,"names":["React","getIntrinsicElementProps","slot","useTableContext","useTableCell_unstable","props","ref","noNativeElements","size","_props_as","rootComponent","as","components","root","always","role","undefined","elementType"],"sources":["D:/shubh/invezza-hrm/node_modules/@fluentui/react-table/lib/components/TableCell/useTableCell.js"],"sourcesContent":["import * as React from 'react';\nimport { getIntrinsicElementProps, slot } from '@fluentui/react-utilities';\nimport { useTableContext } from '../../contexts/tableContext';\n/**\n * Create the state required to render TableCell.\n *\n * The returned state can be modified with hooks such as useTableCellStyles_unstable,\n * before being passed to renderTableCell_unstable.\n *\n * @param props - props from this instance of TableCell\n * @param ref - reference to root HTMLElement of TableCell\n */ export const useTableCell_unstable = (props, ref)=>{\n    const { noNativeElements, size } = useTableContext();\n    var _props_as;\n    const rootComponent = ((_props_as = props.as) !== null && _props_as !== void 0 ? _props_as : noNativeElements) ? 'div' : 'td';\n    return {\n        components: {\n            root: rootComponent\n        },\n        root: slot.always(getIntrinsicElementProps(rootComponent, {\n            // FIXME:\n            // `ref` is wrongly assigned to be `HTMLElement` instead of `HTMLDivElement`\n            // but since it would be a breaking change to fix it, we are casting ref to it's proper type\n            ref: ref,\n            role: rootComponent === 'div' ? 'cell' : undefined,\n            ...props\n        }), {\n            elementType: rootComponent\n        }),\n        noNativeElements,\n        size\n    };\n};\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,wBAAwB,EAAEC,IAAI,QAAQ,2BAA2B;AAC1E,SAASC,eAAe,QAAQ,6BAA6B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAI,OAAO,MAAMC,qBAAqB,GAAGA,CAACC,KAAK,EAAEC,GAAG,KAAG;EACnD,MAAM;IAAEC,gBAAgB;IAAEC;EAAK,CAAC,GAAGL,eAAe,CAAC,CAAC;EACpD,IAAIM,SAAS;EACb,MAAMC,aAAa,GAAG,CAAC,CAACD,SAAS,GAAGJ,KAAK,CAACM,EAAE,MAAM,IAAI,IAAIF,SAAS,KAAK,KAAK,CAAC,GAAGA,SAAS,GAAGF,gBAAgB,IAAI,KAAK,GAAG,IAAI;EAC7H,OAAO;IACHK,UAAU,EAAE;MACRC,IAAI,EAAEH;IACV,CAAC;IACDG,IAAI,EAAEX,IAAI,CAACY,MAAM,CAACb,wBAAwB,CAACS,aAAa,EAAE;MACtD;MACA;MACA;MACAJ,GAAG,EAAEA,GAAG;MACRS,IAAI,EAAEL,aAAa,KAAK,KAAK,GAAG,MAAM,GAAGM,SAAS;MAClD,GAAGX;IACP,CAAC,CAAC,EAAE;MACAY,WAAW,EAAEP;IACjB,CAAC,CAAC;IACFH,gBAAgB;IAChBC;EACJ,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}