{"ast":null,"code":"import * as React from 'react';\nimport { isInteractiveHTMLElement, useEventCallback, slot } from '@fluentui/react-utilities';\nimport { Space } from '@fluentui/keyboard-keys';\nimport { useTableRow_unstable } from '../TableRow/useTableRow';\nimport { dataGridContextDefaultValue, useDataGridContext_unstable } from '../../contexts/dataGridContext';\nimport { DataGridSelectionCell } from '../DataGridSelectionCell/DataGridSelectionCell';\nimport { useTableRowIdContext } from '../../contexts/rowIdContext';\nimport { useIsInTableHeader } from '../../contexts/tableHeaderContext';\n/**\n * Create the state required to render DataGridRow.\n *\n * The returned state can be modified with hooks such as useDataGridRowStyles_unstable,\n * before being passed to renderDataGridRow_unstable.\n *\n * @param props - props from this instance of DataGridRow\n * @param ref - reference to root HTMLElement of DataGridRow\n */\nexport const useDataGridRow_unstable = (props, ref) => {\n  const rowId = useTableRowIdContext();\n  const isHeader = useIsInTableHeader();\n  const columnDefs = useDataGridContext_unstable(ctx => ctx.columns);\n  const selectable = useDataGridContext_unstable(ctx => ctx.selectableRows);\n  const selected = useDataGridContext_unstable(ctx => ctx.selection.isRowSelected(rowId));\n  const focusMode = useDataGridContext_unstable(ctx => ctx.focusMode);\n  const compositeRowTabsterAttribute = useDataGridContext_unstable(ctx => ctx.compositeRowTabsterAttribute);\n  const tabbable = focusMode === 'row_unstable' || focusMode === 'composite';\n  const appearance = useDataGridContext_unstable(ctx => {\n    if (!isHeader && selectable && ctx.selection.isRowSelected(rowId)) {\n      return ctx.selectionAppearance;\n    }\n    return 'none';\n  });\n  const toggleRow = useDataGridContext_unstable(ctx => ctx.selection.toggleRow);\n  const onClick = useEventCallback(e => {\n    var _props_onClick;\n    if (selectable && !isHeader) {\n      toggleRow(e, rowId);\n    }\n    (_props_onClick = props.onClick) === null || _props_onClick === void 0 ? void 0 : _props_onClick.call(props, e);\n  });\n  const onKeyDown = useEventCallback(e => {\n    var _props_onKeyDown;\n    if (selectable && !isHeader && e.key === Space && !isInteractiveHTMLElement(e.target)) {\n      // stop scrolling\n      e.preventDefault();\n      toggleRow(e, rowId);\n    }\n    (_props_onKeyDown = props.onKeyDown) === null || _props_onKeyDown === void 0 ? void 0 : _props_onKeyDown.call(props, e);\n  });\n  const baseState = useTableRow_unstable({\n    appearance,\n    'aria-selected': selectable ? selected : undefined,\n    tabIndex: tabbable && !isHeader ? 0 : undefined,\n    ...(focusMode === 'composite' && !isHeader && compositeRowTabsterAttribute),\n    ...props,\n    onClick,\n    onKeyDown,\n    children: null,\n    as: 'div'\n  }, ref);\n  return {\n    ...baseState,\n    components: {\n      ...baseState.components,\n      selectionCell: DataGridSelectionCell\n    },\n    selectionCell: slot.optional(props.selectionCell, {\n      renderByDefault: selectable,\n      elementType: DataGridSelectionCell\n    }),\n    renderCell: props.children,\n    columnDefs,\n    // This context value should not be used internally\n    // It's intended to help power user render functions\n    dataGridContextValue: useStableDataGridContextValue()\n  };\n};\nfunction useStableDataGridContextValue() {\n  const ref = React.useRef(dataGridContextDefaultValue);\n  // Heads up!\n  // We will not re-render when the context value changes, but we will have the latest value of the context when we do\n  // render for other reasons.\n  //\n  // This relies on a context selector that always returns the same value:\n  // - we will not re-render when the context value changes\n  // - we will store the context value in a ref\n  useDataGridContext_unstable(ctx => {\n    ref.current = ctx;\n    return null;\n  });\n  return ref.current;\n}","map":{"version":3,"names":["React","isInteractiveHTMLElement","useEventCallback","slot","Space","useTableRow_unstable","dataGridContextDefaultValue","useDataGridContext_unstable","DataGridSelectionCell","useTableRowIdContext","useIsInTableHeader","useDataGridRow_unstable","props","ref","rowId","isHeader","columnDefs","ctx","columns","selectable","selectableRows","selected","selection","isRowSelected","focusMode","compositeRowTabsterAttribute","tabbable","appearance","selectionAppearance","toggleRow","onClick","e","_props_onClick","call","onKeyDown","_props_onKeyDown","key","target","preventDefault","baseState","undefined","tabIndex","children","as","components","selectionCell","optional","renderByDefault","elementType","renderCell","dataGridContextValue","useStableDataGridContextValue","useRef","current"],"sources":["D:/shubh/invezza-hrm/node_modules/@fluentui/react-table/lib/components/DataGridRow/useDataGridRow.js"],"sourcesContent":["import * as React from 'react';\nimport { isInteractiveHTMLElement, useEventCallback, slot } from '@fluentui/react-utilities';\nimport { Space } from '@fluentui/keyboard-keys';\nimport { useTableRow_unstable } from '../TableRow/useTableRow';\nimport { dataGridContextDefaultValue, useDataGridContext_unstable } from '../../contexts/dataGridContext';\nimport { DataGridSelectionCell } from '../DataGridSelectionCell/DataGridSelectionCell';\nimport { useTableRowIdContext } from '../../contexts/rowIdContext';\nimport { useIsInTableHeader } from '../../contexts/tableHeaderContext';\n/**\n * Create the state required to render DataGridRow.\n *\n * The returned state can be modified with hooks such as useDataGridRowStyles_unstable,\n * before being passed to renderDataGridRow_unstable.\n *\n * @param props - props from this instance of DataGridRow\n * @param ref - reference to root HTMLElement of DataGridRow\n */ export const useDataGridRow_unstable = (props, ref)=>{\n    const rowId = useTableRowIdContext();\n    const isHeader = useIsInTableHeader();\n    const columnDefs = useDataGridContext_unstable((ctx)=>ctx.columns);\n    const selectable = useDataGridContext_unstable((ctx)=>ctx.selectableRows);\n    const selected = useDataGridContext_unstable((ctx)=>ctx.selection.isRowSelected(rowId));\n    const focusMode = useDataGridContext_unstable((ctx)=>ctx.focusMode);\n    const compositeRowTabsterAttribute = useDataGridContext_unstable((ctx)=>ctx.compositeRowTabsterAttribute);\n    const tabbable = focusMode === 'row_unstable' || focusMode === 'composite';\n    const appearance = useDataGridContext_unstable((ctx)=>{\n        if (!isHeader && selectable && ctx.selection.isRowSelected(rowId)) {\n            return ctx.selectionAppearance;\n        }\n        return 'none';\n    });\n    const toggleRow = useDataGridContext_unstable((ctx)=>ctx.selection.toggleRow);\n    const onClick = useEventCallback((e)=>{\n        var _props_onClick;\n        if (selectable && !isHeader) {\n            toggleRow(e, rowId);\n        }\n        (_props_onClick = props.onClick) === null || _props_onClick === void 0 ? void 0 : _props_onClick.call(props, e);\n    });\n    const onKeyDown = useEventCallback((e)=>{\n        var _props_onKeyDown;\n        if (selectable && !isHeader && e.key === Space && !isInteractiveHTMLElement(e.target)) {\n            // stop scrolling\n            e.preventDefault();\n            toggleRow(e, rowId);\n        }\n        (_props_onKeyDown = props.onKeyDown) === null || _props_onKeyDown === void 0 ? void 0 : _props_onKeyDown.call(props, e);\n    });\n    const baseState = useTableRow_unstable({\n        appearance,\n        'aria-selected': selectable ? selected : undefined,\n        tabIndex: tabbable && !isHeader ? 0 : undefined,\n        ...focusMode === 'composite' && !isHeader && compositeRowTabsterAttribute,\n        ...props,\n        onClick,\n        onKeyDown,\n        children: null,\n        as: 'div'\n    }, ref);\n    return {\n        ...baseState,\n        components: {\n            ...baseState.components,\n            selectionCell: DataGridSelectionCell\n        },\n        selectionCell: slot.optional(props.selectionCell, {\n            renderByDefault: selectable,\n            elementType: DataGridSelectionCell\n        }),\n        renderCell: props.children,\n        columnDefs,\n        // This context value should not be used internally\n        // It's intended to help power user render functions\n        dataGridContextValue: useStableDataGridContextValue()\n    };\n};\nfunction useStableDataGridContextValue() {\n    const ref = React.useRef(dataGridContextDefaultValue);\n    // Heads up!\n    // We will not re-render when the context value changes, but we will have the latest value of the context when we do\n    // render for other reasons.\n    //\n    // This relies on a context selector that always returns the same value:\n    // - we will not re-render when the context value changes\n    // - we will store the context value in a ref\n    useDataGridContext_unstable((ctx)=>{\n        ref.current = ctx;\n        return null;\n    });\n    return ref.current;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}