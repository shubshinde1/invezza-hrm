{"ast":null,"code":"/**\n * creates a list of virtual tree items\n * and provides a map to access each item by id\n */export function createHeadlessTree(initialProps = []) {\n  const root = createHeadlessTreeRootItem();\n  const itemsPerValue = new Map([[root.value, root]]);\n  const headlessTree = {\n    root,\n    get size() {\n      return itemsPerValue.size;\n    },\n    getParent: key => {\n      var _itemsPerValue_get;\n      var _itemsPerValue_get_parentValue, _itemsPerValue_get1;\n      return (_itemsPerValue_get1 = itemsPerValue.get((_itemsPerValue_get_parentValue = (_itemsPerValue_get = itemsPerValue.get(key)) === null || _itemsPerValue_get === void 0 ? void 0 : _itemsPerValue_get.parentValue) !== null && _itemsPerValue_get_parentValue !== void 0 ? _itemsPerValue_get_parentValue : root.value)) !== null && _itemsPerValue_get1 !== void 0 ? _itemsPerValue_get1 : root;\n    },\n    get: key => itemsPerValue.get(key),\n    has: key => itemsPerValue.has(key),\n    add(props) {\n      const {\n        parentValue = headlessTreeRootId,\n        ...propsWithoutParentValue\n      } = props;\n      const parentItem = itemsPerValue.get(parentValue);\n      if (!parentItem) {\n        if (process.env.NODE_ENV === 'development') {\n          // eslint-disable-next-line no-console\n          console.error(`@fluentui/react-tree [createHeadlessTree]:\nTreeItem \"${props.value}\" is wrongly positioned, did you properly ordered provided item props? make sure provided items are organized, parents should come before children`);\n        }\n        return;\n      }\n      parentItem.itemType = 'branch';\n      var _propsWithoutParentValue_itemType;\n      const item = {\n        value: props.value,\n        getTreeItemProps: () => ({\n          ...propsWithoutParentValue,\n          parentValue,\n          'aria-level': item.level,\n          'aria-posinset': item.position,\n          'aria-setsize': parentItem.childrenValues.length,\n          itemType: item.itemType\n        }),\n        itemType: (_propsWithoutParentValue_itemType = propsWithoutParentValue.itemType) !== null && _propsWithoutParentValue_itemType !== void 0 ? _propsWithoutParentValue_itemType : 'leaf',\n        level: parentItem.level + 1,\n        parentValue,\n        childrenValues: [],\n        index: -1,\n        position: parentItem.childrenValues.push(props.value)\n      };\n      itemsPerValue.set(item.value, item);\n    },\n    // TODO: eventually it would be nice to have this method exported for the user to modify\n    // the internal state of the virtual tree\n    // remove(value) {\n    //   const itemToBeRemoved = itemsPerValue.get(value);\n    //   if (!itemToBeRemoved) {\n    //     return;\n    //   }\n    //   const parentItem = headlessTree.getParent(value);\n    //   parentItem.childrenValues.splice(itemToBeRemoved.position, 1);\n    //   itemsPerValue.delete(value);\n    //   if (parentItem.childrenValues.length === 0) {\n    //     parentItem.itemType = 'leaf';\n    //   }\n    //   for (let index = itemToBeRemoved.position; index < parentItem.childrenValues.length; index++) {\n    //     const child = itemsPerValue.get(parentItem.childrenValues[index]);\n    //     if (child) {\n    //       child.position = index + 1;\n    //     }\n    //   }\n    //   for (const descendant of HeadlessTreeSubtreeGenerator(value, headlessTree)) {\n    //     itemsPerValue.delete(descendant.value);\n    //   }\n    // },\n    subtree: key => HeadlessTreeSubtreeGenerator(key, headlessTree),\n    children: key => HeadlessTreeChildrenGenerator(key, headlessTree),\n    ancestors: key => HeadlessTreeAncestorsGenerator(key, headlessTree),\n    visibleItems: openItems => HeadlessTreeVisibleItemsGenerator(openItems, headlessTree)\n  };\n  initialProps.forEach(headlessTree.add);\n  return headlessTree;\n}\nexport const headlessTreeRootId = '__fuiHeadlessTreeRoot';\nfunction createHeadlessTreeRootItem() {\n  return {\n    parentValue: undefined,\n    value: headlessTreeRootId,\n    itemType: 'branch',\n    getTreeItemProps: () => {\n      if (process.env.NODE_ENV !== 'production') {\n        // eslint-disable-next-line no-console\n        console.error(`@fluentui/react-tree [createHeadlessTree]:\nInternal error, trying to access treeitem props from invalid root element`);\n      }\n      return {\n        id: headlessTreeRootId,\n        parentValue: undefined,\n        value: headlessTreeRootId,\n        'aria-setsize': -1,\n        'aria-level': -1,\n        'aria-posinset': -1,\n        itemType: 'branch'\n      };\n    },\n    childrenValues: [],\n    get index() {\n      if (process.env.NODE_ENV !== 'production') {\n        // eslint-disable-next-line no-console\n        console.error(`@fluentui/react-tree [createHeadlessTree]:\nInternal error, trying to access treeitem props from invalid root element`);\n      }\n      return -1;\n    },\n    get position() {\n      if (process.env.NODE_ENV !== 'production') {\n        // eslint-disable-next-line no-console\n        console.error(`@fluentui/react-tree [createHeadlessTree]:\nInternal error, trying to access treeitem props from invalid root element`);\n      }\n      return -1;\n    },\n    level: 0\n  };\n}\n/**\n * Generator that returns all subtree of a given virtual tree item\n * @param key the key of the item to get the subtree from\n */ // eslint-disable-next-line @typescript-eslint/naming-convention\nfunction* HeadlessTreeSubtreeGenerator(key, virtualTreeItems) {\n  const item = virtualTreeItems.get(key);\n  if (!item || item.childrenValues.length === 0) {\n    return;\n  }\n  for (const childValue of item.childrenValues) {\n    yield virtualTreeItems.get(childValue);\n    yield* HeadlessTreeSubtreeGenerator(childValue, virtualTreeItems);\n  }\n}\n/**\n * Generator that returns all children of a given virtual tree item\n * @param key the key of the item to get the children from\n */ // eslint-disable-next-line @typescript-eslint/naming-convention\nfunction* HeadlessTreeChildrenGenerator(key, virtualTreeItems) {\n  const item = virtualTreeItems.get(key);\n  if (!item || item.childrenValues.length === 0) {\n    return;\n  }\n  for (const childValue of item.childrenValues) {\n    yield virtualTreeItems.get(childValue);\n  }\n}\n/**\n * Generator that returns all ancestors of a given virtual tree item\n * @param key the key of the item to get the children from\n */ // eslint-disable-next-line @typescript-eslint/naming-convention\nfunction* HeadlessTreeAncestorsGenerator(key, virtualTreeItems) {\n  let parent = virtualTreeItems.getParent(key);\n  while (parent !== virtualTreeItems.root) {\n    yield parent;\n    parent = virtualTreeItems.getParent(parent.value);\n  }\n}\n/**\n * Generator that returns all visible items of a given virtual tree\n * @param openItems the open items of the tree\n */ // eslint-disable-next-line @typescript-eslint/naming-convention\nfunction* HeadlessTreeVisibleItemsGenerator(openItems, virtualTreeItems) {\n  let index = 0;\n  for (const item of HeadlessTreeSubtreeGenerator(virtualTreeItems.root.value, virtualTreeItems)) {\n    if (isItemVisible(item, openItems, virtualTreeItems)) {\n      item.index = index++;\n      yield item;\n    }\n  }\n}\nfunction isItemVisible(item, openItems, virtualTreeItems) {\n  if (item.level === 1) {\n    return true;\n  }\n  while (item.parentValue && item.parentValue !== virtualTreeItems.root.value) {\n    if (!openItems.has(item.parentValue)) {\n      return false;\n    }\n    const parent = virtualTreeItems.get(item.parentValue);\n    if (!parent) {\n      return false;\n    }\n    item = parent;\n  }\n  return true;\n}","map":{"version":3,"names":["createHeadlessTree","initialProps","root","createHeadlessTreeRootItem","itemsPerValue","Map","value","headlessTree","size","getParent","key","_itemsPerValue_get","_itemsPerValue_get_parentValue","_itemsPerValue_get1","get","parentValue","has","add","props","headlessTreeRootId","propsWithoutParentValue","parentItem","process","env","NODE_ENV","console","error","itemType","_propsWithoutParentValue_itemType","item","getTreeItemProps","level","position","childrenValues","length","index","push","set","subtree","HeadlessTreeSubtreeGenerator","children","HeadlessTreeChildrenGenerator","ancestors","HeadlessTreeAncestorsGenerator","visibleItems","openItems","HeadlessTreeVisibleItemsGenerator","forEach","undefined","id","virtualTreeItems","childValue","parent","isItemVisible"],"sources":["D:/shubh/invezza-hrm/node_modules/@fluentui/react-tree/lib/utils/createHeadlessTree.js"],"sourcesContent":["/**\n * creates a list of virtual tree items\n * and provides a map to access each item by id\n */ export function createHeadlessTree(initialProps = []) {\n    const root = createHeadlessTreeRootItem();\n    const itemsPerValue = new Map([\n        [\n            root.value,\n            root\n        ]\n    ]);\n    const headlessTree = {\n        root,\n        get size () {\n            return itemsPerValue.size;\n        },\n        getParent: (key)=>{\n            var _itemsPerValue_get;\n            var _itemsPerValue_get_parentValue, _itemsPerValue_get1;\n            return (_itemsPerValue_get1 = itemsPerValue.get((_itemsPerValue_get_parentValue = (_itemsPerValue_get = itemsPerValue.get(key)) === null || _itemsPerValue_get === void 0 ? void 0 : _itemsPerValue_get.parentValue) !== null && _itemsPerValue_get_parentValue !== void 0 ? _itemsPerValue_get_parentValue : root.value)) !== null && _itemsPerValue_get1 !== void 0 ? _itemsPerValue_get1 : root;\n        },\n        get: (key)=>itemsPerValue.get(key),\n        has: (key)=>itemsPerValue.has(key),\n        add (props) {\n            const { parentValue = headlessTreeRootId, ...propsWithoutParentValue } = props;\n            const parentItem = itemsPerValue.get(parentValue);\n            if (!parentItem) {\n                if (process.env.NODE_ENV === 'development') {\n                    // eslint-disable-next-line no-console\n                    console.error(`@fluentui/react-tree [createHeadlessTree]:\nTreeItem \"${props.value}\" is wrongly positioned, did you properly ordered provided item props? make sure provided items are organized, parents should come before children`);\n                }\n                return;\n            }\n            parentItem.itemType = 'branch';\n            var _propsWithoutParentValue_itemType;\n            const item = {\n                value: props.value,\n                getTreeItemProps: ()=>({\n                        ...propsWithoutParentValue,\n                        parentValue,\n                        'aria-level': item.level,\n                        'aria-posinset': item.position,\n                        'aria-setsize': parentItem.childrenValues.length,\n                        itemType: item.itemType\n                    }),\n                itemType: (_propsWithoutParentValue_itemType = propsWithoutParentValue.itemType) !== null && _propsWithoutParentValue_itemType !== void 0 ? _propsWithoutParentValue_itemType : 'leaf',\n                level: parentItem.level + 1,\n                parentValue,\n                childrenValues: [],\n                index: -1,\n                position: parentItem.childrenValues.push(props.value)\n            };\n            itemsPerValue.set(item.value, item);\n        },\n        // TODO: eventually it would be nice to have this method exported for the user to modify\n        // the internal state of the virtual tree\n        // remove(value) {\n        //   const itemToBeRemoved = itemsPerValue.get(value);\n        //   if (!itemToBeRemoved) {\n        //     return;\n        //   }\n        //   const parentItem = headlessTree.getParent(value);\n        //   parentItem.childrenValues.splice(itemToBeRemoved.position, 1);\n        //   itemsPerValue.delete(value);\n        //   if (parentItem.childrenValues.length === 0) {\n        //     parentItem.itemType = 'leaf';\n        //   }\n        //   for (let index = itemToBeRemoved.position; index < parentItem.childrenValues.length; index++) {\n        //     const child = itemsPerValue.get(parentItem.childrenValues[index]);\n        //     if (child) {\n        //       child.position = index + 1;\n        //     }\n        //   }\n        //   for (const descendant of HeadlessTreeSubtreeGenerator(value, headlessTree)) {\n        //     itemsPerValue.delete(descendant.value);\n        //   }\n        // },\n        subtree: (key)=>HeadlessTreeSubtreeGenerator(key, headlessTree),\n        children: (key)=>HeadlessTreeChildrenGenerator(key, headlessTree),\n        ancestors: (key)=>HeadlessTreeAncestorsGenerator(key, headlessTree),\n        visibleItems: (openItems)=>HeadlessTreeVisibleItemsGenerator(openItems, headlessTree)\n    };\n    initialProps.forEach(headlessTree.add);\n    return headlessTree;\n}\nexport const headlessTreeRootId = '__fuiHeadlessTreeRoot';\nfunction createHeadlessTreeRootItem() {\n    return {\n        parentValue: undefined,\n        value: headlessTreeRootId,\n        itemType: 'branch',\n        getTreeItemProps: ()=>{\n            if (process.env.NODE_ENV !== 'production') {\n                // eslint-disable-next-line no-console\n                console.error(`@fluentui/react-tree [createHeadlessTree]:\nInternal error, trying to access treeitem props from invalid root element`);\n            }\n            return {\n                id: headlessTreeRootId,\n                parentValue: undefined,\n                value: headlessTreeRootId,\n                'aria-setsize': -1,\n                'aria-level': -1,\n                'aria-posinset': -1,\n                itemType: 'branch'\n            };\n        },\n        childrenValues: [],\n        get index () {\n            if (process.env.NODE_ENV !== 'production') {\n                // eslint-disable-next-line no-console\n                console.error(`@fluentui/react-tree [createHeadlessTree]:\nInternal error, trying to access treeitem props from invalid root element`);\n            }\n            return -1;\n        },\n        get position () {\n            if (process.env.NODE_ENV !== 'production') {\n                // eslint-disable-next-line no-console\n                console.error(`@fluentui/react-tree [createHeadlessTree]:\nInternal error, trying to access treeitem props from invalid root element`);\n            }\n            return -1;\n        },\n        level: 0\n    };\n}\n/**\n * Generator that returns all subtree of a given virtual tree item\n * @param key the key of the item to get the subtree from\n */ // eslint-disable-next-line @typescript-eslint/naming-convention\nfunction* HeadlessTreeSubtreeGenerator(key, virtualTreeItems) {\n    const item = virtualTreeItems.get(key);\n    if (!item || item.childrenValues.length === 0) {\n        return;\n    }\n    for (const childValue of item.childrenValues){\n        yield virtualTreeItems.get(childValue);\n        yield* HeadlessTreeSubtreeGenerator(childValue, virtualTreeItems);\n    }\n}\n/**\n * Generator that returns all children of a given virtual tree item\n * @param key the key of the item to get the children from\n */ // eslint-disable-next-line @typescript-eslint/naming-convention\nfunction* HeadlessTreeChildrenGenerator(key, virtualTreeItems) {\n    const item = virtualTreeItems.get(key);\n    if (!item || item.childrenValues.length === 0) {\n        return;\n    }\n    for (const childValue of item.childrenValues){\n        yield virtualTreeItems.get(childValue);\n    }\n}\n/**\n * Generator that returns all ancestors of a given virtual tree item\n * @param key the key of the item to get the children from\n */ // eslint-disable-next-line @typescript-eslint/naming-convention\nfunction* HeadlessTreeAncestorsGenerator(key, virtualTreeItems) {\n    let parent = virtualTreeItems.getParent(key);\n    while(parent !== virtualTreeItems.root){\n        yield parent;\n        parent = virtualTreeItems.getParent(parent.value);\n    }\n}\n/**\n * Generator that returns all visible items of a given virtual tree\n * @param openItems the open items of the tree\n */ // eslint-disable-next-line @typescript-eslint/naming-convention\nfunction* HeadlessTreeVisibleItemsGenerator(openItems, virtualTreeItems) {\n    let index = 0;\n    for (const item of HeadlessTreeSubtreeGenerator(virtualTreeItems.root.value, virtualTreeItems)){\n        if (isItemVisible(item, openItems, virtualTreeItems)) {\n            item.index = index++;\n            yield item;\n        }\n    }\n}\nfunction isItemVisible(item, openItems, virtualTreeItems) {\n    if (item.level === 1) {\n        return true;\n    }\n    while(item.parentValue && item.parentValue !== virtualTreeItems.root.value){\n        if (!openItems.has(item.parentValue)) {\n            return false;\n        }\n        const parent = virtualTreeItems.get(item.parentValue);\n        if (!parent) {\n            return false;\n        }\n        item = parent;\n    }\n    return true;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}