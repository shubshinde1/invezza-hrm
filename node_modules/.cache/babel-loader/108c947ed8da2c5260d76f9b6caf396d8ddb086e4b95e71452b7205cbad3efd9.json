{"ast":null,"code":"import * as React from 'react';\nimport { useActiveDescendant } from '@fluentui/react-aria';\nimport { useFieldControlProps_unstable } from '@fluentui/react-field';\nimport { ChevronDownRegular as ChevronDownIcon, DismissRegular as DismissIcon } from '@fluentui/react-icons';\nimport { getPartitionedNativeProps, mergeCallbacks, useEventCallback, useId, useMergedRefs, slot } from '@fluentui/react-utilities';\nimport { useComboboxBaseState } from '../../utils/useComboboxBaseState';\nimport { useComboboxPositioning } from '../../utils/useComboboxPositioning';\nimport { Listbox } from '../Listbox/Listbox';\nimport { useListboxSlot } from '../../utils/useListboxSlot';\nimport { useInputTriggerSlot } from './useInputTriggerSlot';\nimport { optionClassNames } from '../Option/useOptionStyles.styles';\n/**\n * Create the state required to render Combobox.\n *\n * The returned state can be modified with hooks such as useComboboxStyles_unstable,\n * before being passed to renderCombobox_unstable.\n *\n * @param props - props from this instance of Combobox\n * @param ref - reference to root HTMLElement of Combobox\n */\nexport const useCombobox_unstable = (props, ref) => {\n  var _state_clearIcon, _state_clearIcon1;\n  // Merge props from surrounding <Field>, if any\n  props = useFieldControlProps_unstable(props, {\n    supportsLabelFor: true,\n    supportsRequired: true,\n    supportsSize: true\n  });\n  const {\n    listboxRef: activeDescendantListboxRef,\n    activeParentRef,\n    controller: activeDescendantController\n  } = useActiveDescendant({\n    matchOption: el => el.classList.contains(optionClassNames.root)\n  });\n  const baseState = useComboboxBaseState({\n    ...props,\n    editable: true,\n    activeDescendantController\n  });\n  const {\n    clearable,\n    clearSelection,\n    multiselect,\n    open,\n    selectedOptions,\n    selectOption,\n    setOpen,\n    setValue,\n    value,\n    hasFocus\n  } = baseState;\n  const [comboboxPopupRef, comboboxTargetRef] = useComboboxPositioning(props);\n  const {\n    disabled,\n    freeform,\n    inlinePopup\n  } = props;\n  const comboId = useId('combobox-');\n  const {\n    primary: triggerNativeProps,\n    root: rootNativeProps\n  } = getPartitionedNativeProps({\n    props,\n    primarySlotTagName: 'input',\n    excludedPropNames: ['children', 'size']\n  });\n  // reset any typed value when an option is selected\n  baseState.selectOption = (ev, option) => {\n    setValue(undefined);\n    selectOption(ev, option);\n  };\n  baseState.setOpen = (ev, newState) => {\n    if (disabled) {\n      return;\n    }\n    if (!newState && !freeform) {\n      setValue(undefined);\n    }\n    setOpen(ev, newState);\n  };\n  const triggerRef = React.useRef(null);\n  const listbox = useListboxSlot(props.listbox, useMergedRefs(comboboxPopupRef, activeDescendantListboxRef), {\n    state: baseState,\n    triggerRef,\n    defaultProps: {\n      children: props.children\n    }\n  });\n  var _props_input;\n  const triggerSlot = useInputTriggerSlot((_props_input = props.input) !== null && _props_input !== void 0 ? _props_input : {}, useMergedRefs(triggerRef, activeParentRef, ref), {\n    state: baseState,\n    freeform,\n    defaultProps: {\n      type: 'text',\n      value: value !== null && value !== void 0 ? value : '',\n      'aria-controls': open ? listbox === null || listbox === void 0 ? void 0 : listbox.id : undefined,\n      ...triggerNativeProps\n    },\n    activeDescendantController\n  });\n  const rootSlot = slot.always(props.root, {\n    defaultProps: {\n      'aria-owns': !inlinePopup && open ? listbox === null || listbox === void 0 ? void 0 : listbox.id : undefined,\n      ...rootNativeProps\n    },\n    elementType: 'div'\n  });\n  rootSlot.ref = useMergedRefs(rootSlot.ref, comboboxTargetRef);\n  const showClearIcon = selectedOptions.length > 0 && clearable && !multiselect;\n  const state = {\n    components: {\n      root: 'div',\n      input: 'input',\n      expandIcon: 'span',\n      listbox: Listbox,\n      clearIcon: 'span'\n    },\n    root: rootSlot,\n    input: triggerSlot,\n    listbox: open || hasFocus ? listbox : undefined,\n    clearIcon: slot.optional(props.clearIcon, {\n      defaultProps: {\n        'aria-hidden': 'true',\n        children: /*#__PURE__*/React.createElement(DismissIcon, null)\n      },\n      elementType: 'span',\n      renderByDefault: true\n    }),\n    expandIcon: slot.optional(props.expandIcon, {\n      renderByDefault: true,\n      defaultProps: {\n        'aria-expanded': open,\n        children: /*#__PURE__*/React.createElement(ChevronDownIcon, null),\n        role: 'button'\n      },\n      elementType: 'span'\n    }),\n    showClearIcon,\n    activeDescendantController,\n    ...baseState\n  };\n  /* handle open/close + focus change when clicking expandIcon */\n  const {\n    onMouseDown: onIconMouseDown\n  } = state.expandIcon || {};\n  const onExpandIconMouseDown = useEventCallback(mergeCallbacks(onIconMouseDown, event => {\n    var _triggerRef_current;\n    event.preventDefault();\n    state.setOpen(event, !state.open);\n    (_triggerRef_current = triggerRef.current) === null || _triggerRef_current === void 0 ? void 0 : _triggerRef_current.focus();\n  }));\n  if (state.expandIcon) {\n    state.expandIcon.onMouseDown = onExpandIconMouseDown;\n    // If there is no explicit aria-label, calculate default accName attribute for expandIcon button,\n    // using the following steps:\n    // 1. If there is an aria-label, it is \"Open [aria-label]\"\n    // 2. If there is an aria-labelledby, it is \"Open [aria-labelledby target]\" (using aria-labelledby + ids)\n    // 3. If there is no aria-label/ledby attr, it falls back to \"Open\"\n    // We can't fall back to a label/htmlFor name because of https://github.com/w3c/accname/issues/179\n    const hasExpandLabel = state.expandIcon['aria-label'] || state.expandIcon['aria-labelledby'];\n    const defaultOpenString = 'Open'; // this is english-only since it is the fallback\n    if (!hasExpandLabel) {\n      if (props['aria-labelledby']) {\n        var _state_expandIcon_id;\n        const chevronId = (_state_expandIcon_id = state.expandIcon.id) !== null && _state_expandIcon_id !== void 0 ? _state_expandIcon_id : `${comboId}-chevron`;\n        const chevronLabelledBy = `${chevronId} ${state.input['aria-labelledby']}`;\n        state.expandIcon['aria-label'] = defaultOpenString;\n        state.expandIcon.id = chevronId;\n        state.expandIcon['aria-labelledby'] = chevronLabelledBy;\n      } else if (props['aria-label']) {\n        state.expandIcon['aria-label'] = `${defaultOpenString} ${props['aria-label']}`;\n      } else {\n        state.expandIcon['aria-label'] = defaultOpenString;\n      }\n    }\n  }\n  const onClearIconMouseDown = useEventCallback(mergeCallbacks((_state_clearIcon = state.clearIcon) === null || _state_clearIcon === void 0 ? void 0 : _state_clearIcon.onMouseDown, ev => {\n    ev.preventDefault();\n  }));\n  const onClearIconClick = useEventCallback(mergeCallbacks((_state_clearIcon1 = state.clearIcon) === null || _state_clearIcon1 === void 0 ? void 0 : _state_clearIcon1.onClick, ev => {\n    clearSelection(ev);\n  }));\n  if (state.clearIcon) {\n    state.clearIcon.onMouseDown = onClearIconMouseDown;\n    state.clearIcon.onClick = onClearIconClick;\n  }\n  // Heads up! We don't support \"clearable\" in multiselect mode, so we should never display a slot\n  if (multiselect) {\n    state.clearIcon = undefined;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- \"process.env\" does not change in runtime\n    React.useEffect(() => {\n      if (clearable && multiselect) {\n        // eslint-disable-next-line no-console\n        console.error(`[@fluentui/react-combobox] \"clearable\" prop is not supported in multiselect mode.`);\n      }\n    }, [clearable, multiselect]);\n  }\n  return state;\n};","map":{"version":3,"names":["React","useActiveDescendant","useFieldControlProps_unstable","ChevronDownRegular","ChevronDownIcon","DismissRegular","DismissIcon","getPartitionedNativeProps","mergeCallbacks","useEventCallback","useId","useMergedRefs","slot","useComboboxBaseState","useComboboxPositioning","Listbox","useListboxSlot","useInputTriggerSlot","optionClassNames","useCombobox_unstable","props","ref","_state_clearIcon","_state_clearIcon1","supportsLabelFor","supportsRequired","supportsSize","listboxRef","activeDescendantListboxRef","activeParentRef","controller","activeDescendantController","matchOption","el","classList","contains","root","baseState","editable","clearable","clearSelection","multiselect","open","selectedOptions","selectOption","setOpen","setValue","value","hasFocus","comboboxPopupRef","comboboxTargetRef","disabled","freeform","inlinePopup","comboId","primary","triggerNativeProps","rootNativeProps","primarySlotTagName","excludedPropNames","ev","option","undefined","newState","triggerRef","useRef","listbox","state","defaultProps","children","_props_input","triggerSlot","input","type","id","rootSlot","always","elementType","showClearIcon","length","components","expandIcon","clearIcon","optional","createElement","renderByDefault","role","onMouseDown","onIconMouseDown","onExpandIconMouseDown","event","_triggerRef_current","preventDefault","current","focus","hasExpandLabel","defaultOpenString","_state_expandIcon_id","chevronId","chevronLabelledBy","onClearIconMouseDown","onClearIconClick","onClick","process","env","NODE_ENV","useEffect","console","error"],"sources":["D:/shubh/invezza-hrm/node_modules/@fluentui/react-combobox/lib/components/Combobox/useCombobox.js"],"sourcesContent":["import * as React from 'react';\nimport { useActiveDescendant } from '@fluentui/react-aria';\nimport { useFieldControlProps_unstable } from '@fluentui/react-field';\nimport { ChevronDownRegular as ChevronDownIcon, DismissRegular as DismissIcon } from '@fluentui/react-icons';\nimport { getPartitionedNativeProps, mergeCallbacks, useEventCallback, useId, useMergedRefs, slot } from '@fluentui/react-utilities';\nimport { useComboboxBaseState } from '../../utils/useComboboxBaseState';\nimport { useComboboxPositioning } from '../../utils/useComboboxPositioning';\nimport { Listbox } from '../Listbox/Listbox';\nimport { useListboxSlot } from '../../utils/useListboxSlot';\nimport { useInputTriggerSlot } from './useInputTriggerSlot';\nimport { optionClassNames } from '../Option/useOptionStyles.styles';\n/**\n * Create the state required to render Combobox.\n *\n * The returned state can be modified with hooks such as useComboboxStyles_unstable,\n * before being passed to renderCombobox_unstable.\n *\n * @param props - props from this instance of Combobox\n * @param ref - reference to root HTMLElement of Combobox\n */ export const useCombobox_unstable = (props, ref)=>{\n    var _state_clearIcon, _state_clearIcon1;\n    // Merge props from surrounding <Field>, if any\n    props = useFieldControlProps_unstable(props, {\n        supportsLabelFor: true,\n        supportsRequired: true,\n        supportsSize: true\n    });\n    const { listboxRef: activeDescendantListboxRef, activeParentRef, controller: activeDescendantController } = useActiveDescendant({\n        matchOption: (el)=>el.classList.contains(optionClassNames.root)\n    });\n    const baseState = useComboboxBaseState({\n        ...props,\n        editable: true,\n        activeDescendantController\n    });\n    const { clearable, clearSelection, multiselect, open, selectedOptions, selectOption, setOpen, setValue, value, hasFocus } = baseState;\n    const [comboboxPopupRef, comboboxTargetRef] = useComboboxPositioning(props);\n    const { disabled, freeform, inlinePopup } = props;\n    const comboId = useId('combobox-');\n    const { primary: triggerNativeProps, root: rootNativeProps } = getPartitionedNativeProps({\n        props,\n        primarySlotTagName: 'input',\n        excludedPropNames: [\n            'children',\n            'size'\n        ]\n    });\n    // reset any typed value when an option is selected\n    baseState.selectOption = (ev, option)=>{\n        setValue(undefined);\n        selectOption(ev, option);\n    };\n    baseState.setOpen = (ev, newState)=>{\n        if (disabled) {\n            return;\n        }\n        if (!newState && !freeform) {\n            setValue(undefined);\n        }\n        setOpen(ev, newState);\n    };\n    const triggerRef = React.useRef(null);\n    const listbox = useListboxSlot(props.listbox, useMergedRefs(comboboxPopupRef, activeDescendantListboxRef), {\n        state: baseState,\n        triggerRef,\n        defaultProps: {\n            children: props.children\n        }\n    });\n    var _props_input;\n    const triggerSlot = useInputTriggerSlot((_props_input = props.input) !== null && _props_input !== void 0 ? _props_input : {}, useMergedRefs(triggerRef, activeParentRef, ref), {\n        state: baseState,\n        freeform,\n        defaultProps: {\n            type: 'text',\n            value: value !== null && value !== void 0 ? value : '',\n            'aria-controls': open ? listbox === null || listbox === void 0 ? void 0 : listbox.id : undefined,\n            ...triggerNativeProps\n        },\n        activeDescendantController\n    });\n    const rootSlot = slot.always(props.root, {\n        defaultProps: {\n            'aria-owns': !inlinePopup && open ? listbox === null || listbox === void 0 ? void 0 : listbox.id : undefined,\n            ...rootNativeProps\n        },\n        elementType: 'div'\n    });\n    rootSlot.ref = useMergedRefs(rootSlot.ref, comboboxTargetRef);\n    const showClearIcon = selectedOptions.length > 0 && clearable && !multiselect;\n    const state = {\n        components: {\n            root: 'div',\n            input: 'input',\n            expandIcon: 'span',\n            listbox: Listbox,\n            clearIcon: 'span'\n        },\n        root: rootSlot,\n        input: triggerSlot,\n        listbox: open || hasFocus ? listbox : undefined,\n        clearIcon: slot.optional(props.clearIcon, {\n            defaultProps: {\n                'aria-hidden': 'true',\n                children: /*#__PURE__*/ React.createElement(DismissIcon, null)\n            },\n            elementType: 'span',\n            renderByDefault: true\n        }),\n        expandIcon: slot.optional(props.expandIcon, {\n            renderByDefault: true,\n            defaultProps: {\n                'aria-expanded': open,\n                children: /*#__PURE__*/ React.createElement(ChevronDownIcon, null),\n                role: 'button'\n            },\n            elementType: 'span'\n        }),\n        showClearIcon,\n        activeDescendantController,\n        ...baseState\n    };\n    /* handle open/close + focus change when clicking expandIcon */ const { onMouseDown: onIconMouseDown } = state.expandIcon || {};\n    const onExpandIconMouseDown = useEventCallback(mergeCallbacks(onIconMouseDown, (event)=>{\n        var _triggerRef_current;\n        event.preventDefault();\n        state.setOpen(event, !state.open);\n        (_triggerRef_current = triggerRef.current) === null || _triggerRef_current === void 0 ? void 0 : _triggerRef_current.focus();\n    }));\n    if (state.expandIcon) {\n        state.expandIcon.onMouseDown = onExpandIconMouseDown;\n        // If there is no explicit aria-label, calculate default accName attribute for expandIcon button,\n        // using the following steps:\n        // 1. If there is an aria-label, it is \"Open [aria-label]\"\n        // 2. If there is an aria-labelledby, it is \"Open [aria-labelledby target]\" (using aria-labelledby + ids)\n        // 3. If there is no aria-label/ledby attr, it falls back to \"Open\"\n        // We can't fall back to a label/htmlFor name because of https://github.com/w3c/accname/issues/179\n        const hasExpandLabel = state.expandIcon['aria-label'] || state.expandIcon['aria-labelledby'];\n        const defaultOpenString = 'Open'; // this is english-only since it is the fallback\n        if (!hasExpandLabel) {\n            if (props['aria-labelledby']) {\n                var _state_expandIcon_id;\n                const chevronId = (_state_expandIcon_id = state.expandIcon.id) !== null && _state_expandIcon_id !== void 0 ? _state_expandIcon_id : `${comboId}-chevron`;\n                const chevronLabelledBy = `${chevronId} ${state.input['aria-labelledby']}`;\n                state.expandIcon['aria-label'] = defaultOpenString;\n                state.expandIcon.id = chevronId;\n                state.expandIcon['aria-labelledby'] = chevronLabelledBy;\n            } else if (props['aria-label']) {\n                state.expandIcon['aria-label'] = `${defaultOpenString} ${props['aria-label']}`;\n            } else {\n                state.expandIcon['aria-label'] = defaultOpenString;\n            }\n        }\n    }\n    const onClearIconMouseDown = useEventCallback(mergeCallbacks((_state_clearIcon = state.clearIcon) === null || _state_clearIcon === void 0 ? void 0 : _state_clearIcon.onMouseDown, (ev)=>{\n        ev.preventDefault();\n    }));\n    const onClearIconClick = useEventCallback(mergeCallbacks((_state_clearIcon1 = state.clearIcon) === null || _state_clearIcon1 === void 0 ? void 0 : _state_clearIcon1.onClick, (ev)=>{\n        clearSelection(ev);\n    }));\n    if (state.clearIcon) {\n        state.clearIcon.onMouseDown = onClearIconMouseDown;\n        state.clearIcon.onClick = onClearIconClick;\n    }\n    // Heads up! We don't support \"clearable\" in multiselect mode, so we should never display a slot\n    if (multiselect) {\n        state.clearIcon = undefined;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        // eslint-disable-next-line react-hooks/rules-of-hooks -- \"process.env\" does not change in runtime\n        React.useEffect(()=>{\n            if (clearable && multiselect) {\n                // eslint-disable-next-line no-console\n                console.error(`[@fluentui/react-combobox] \"clearable\" prop is not supported in multiselect mode.`);\n            }\n        }, [\n            clearable,\n            multiselect\n        ]);\n    }\n    return state;\n};\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,mBAAmB,QAAQ,sBAAsB;AAC1D,SAASC,6BAA6B,QAAQ,uBAAuB;AACrE,SAASC,kBAAkB,IAAIC,eAAe,EAAEC,cAAc,IAAIC,WAAW,QAAQ,uBAAuB;AAC5G,SAASC,yBAAyB,EAAEC,cAAc,EAAEC,gBAAgB,EAAEC,KAAK,EAAEC,aAAa,EAAEC,IAAI,QAAQ,2BAA2B;AACnI,SAASC,oBAAoB,QAAQ,kCAAkC;AACvE,SAASC,sBAAsB,QAAQ,oCAAoC;AAC3E,SAASC,OAAO,QAAQ,oBAAoB;AAC5C,SAASC,cAAc,QAAQ,4BAA4B;AAC3D,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,gBAAgB,QAAQ,kCAAkC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAI,OAAO,MAAMC,oBAAoB,GAAGA,CAACC,KAAK,EAAEC,GAAG,KAAG;EAClD,IAAIC,gBAAgB,EAAEC,iBAAiB;EACvC;EACAH,KAAK,GAAGlB,6BAA6B,CAACkB,KAAK,EAAE;IACzCI,gBAAgB,EAAE,IAAI;IACtBC,gBAAgB,EAAE,IAAI;IACtBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF,MAAM;IAAEC,UAAU,EAAEC,0BAA0B;IAAEC,eAAe;IAAEC,UAAU,EAAEC;EAA2B,CAAC,GAAG9B,mBAAmB,CAAC;IAC5H+B,WAAW,EAAGC,EAAE,IAAGA,EAAE,CAACC,SAAS,CAACC,QAAQ,CAACjB,gBAAgB,CAACkB,IAAI;EAClE,CAAC,CAAC;EACF,MAAMC,SAAS,GAAGxB,oBAAoB,CAAC;IACnC,GAAGO,KAAK;IACRkB,QAAQ,EAAE,IAAI;IACdP;EACJ,CAAC,CAAC;EACF,MAAM;IAAEQ,SAAS;IAAEC,cAAc;IAAEC,WAAW;IAAEC,IAAI;IAAEC,eAAe;IAAEC,YAAY;IAAEC,OAAO;IAAEC,QAAQ;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGX,SAAS;EACrI,MAAM,CAACY,gBAAgB,EAAEC,iBAAiB,CAAC,GAAGpC,sBAAsB,CAACM,KAAK,CAAC;EAC3E,MAAM;IAAE+B,QAAQ;IAAEC,QAAQ;IAAEC;EAAY,CAAC,GAAGjC,KAAK;EACjD,MAAMkC,OAAO,GAAG5C,KAAK,CAAC,WAAW,CAAC;EAClC,MAAM;IAAE6C,OAAO,EAAEC,kBAAkB;IAAEpB,IAAI,EAAEqB;EAAgB,CAAC,GAAGlD,yBAAyB,CAAC;IACrFa,KAAK;IACLsC,kBAAkB,EAAE,OAAO;IAC3BC,iBAAiB,EAAE,CACf,UAAU,EACV,MAAM;EAEd,CAAC,CAAC;EACF;EACAtB,SAAS,CAACO,YAAY,GAAG,CAACgB,EAAE,EAAEC,MAAM,KAAG;IACnCf,QAAQ,CAACgB,SAAS,CAAC;IACnBlB,YAAY,CAACgB,EAAE,EAAEC,MAAM,CAAC;EAC5B,CAAC;EACDxB,SAAS,CAACQ,OAAO,GAAG,CAACe,EAAE,EAAEG,QAAQ,KAAG;IAChC,IAAIZ,QAAQ,EAAE;MACV;IACJ;IACA,IAAI,CAACY,QAAQ,IAAI,CAACX,QAAQ,EAAE;MACxBN,QAAQ,CAACgB,SAAS,CAAC;IACvB;IACAjB,OAAO,CAACe,EAAE,EAAEG,QAAQ,CAAC;EACzB,CAAC;EACD,MAAMC,UAAU,GAAGhE,KAAK,CAACiE,MAAM,CAAC,IAAI,CAAC;EACrC,MAAMC,OAAO,GAAGlD,cAAc,CAACI,KAAK,CAAC8C,OAAO,EAAEvD,aAAa,CAACsC,gBAAgB,EAAErB,0BAA0B,CAAC,EAAE;IACvGuC,KAAK,EAAE9B,SAAS;IAChB2B,UAAU;IACVI,YAAY,EAAE;MACVC,QAAQ,EAAEjD,KAAK,CAACiD;IACpB;EACJ,CAAC,CAAC;EACF,IAAIC,YAAY;EAChB,MAAMC,WAAW,GAAGtD,mBAAmB,CAAC,CAACqD,YAAY,GAAGlD,KAAK,CAACoD,KAAK,MAAM,IAAI,IAAIF,YAAY,KAAK,KAAK,CAAC,GAAGA,YAAY,GAAG,CAAC,CAAC,EAAE3D,aAAa,CAACqD,UAAU,EAAEnC,eAAe,EAAER,GAAG,CAAC,EAAE;IAC3K8C,KAAK,EAAE9B,SAAS;IAChBe,QAAQ;IACRgB,YAAY,EAAE;MACVK,IAAI,EAAE,MAAM;MACZ1B,KAAK,EAAEA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAGA,KAAK,GAAG,EAAE;MACtD,eAAe,EAAEL,IAAI,GAAGwB,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACQ,EAAE,GAAGZ,SAAS;MAChG,GAAGN;IACP,CAAC;IACDzB;EACJ,CAAC,CAAC;EACF,MAAM4C,QAAQ,GAAG/D,IAAI,CAACgE,MAAM,CAACxD,KAAK,CAACgB,IAAI,EAAE;IACrCgC,YAAY,EAAE;MACV,WAAW,EAAE,CAACf,WAAW,IAAIX,IAAI,GAAGwB,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACQ,EAAE,GAAGZ,SAAS;MAC5G,GAAGL;IACP,CAAC;IACDoB,WAAW,EAAE;EACjB,CAAC,CAAC;EACFF,QAAQ,CAACtD,GAAG,GAAGV,aAAa,CAACgE,QAAQ,CAACtD,GAAG,EAAE6B,iBAAiB,CAAC;EAC7D,MAAM4B,aAAa,GAAGnC,eAAe,CAACoC,MAAM,GAAG,CAAC,IAAIxC,SAAS,IAAI,CAACE,WAAW;EAC7E,MAAM0B,KAAK,GAAG;IACVa,UAAU,EAAE;MACR5C,IAAI,EAAE,KAAK;MACXoC,KAAK,EAAE,OAAO;MACdS,UAAU,EAAE,MAAM;MAClBf,OAAO,EAAEnD,OAAO;MAChBmE,SAAS,EAAE;IACf,CAAC;IACD9C,IAAI,EAAEuC,QAAQ;IACdH,KAAK,EAAED,WAAW;IAClBL,OAAO,EAAExB,IAAI,IAAIM,QAAQ,GAAGkB,OAAO,GAAGJ,SAAS;IAC/CoB,SAAS,EAAEtE,IAAI,CAACuE,QAAQ,CAAC/D,KAAK,CAAC8D,SAAS,EAAE;MACtCd,YAAY,EAAE;QACV,aAAa,EAAE,MAAM;QACrBC,QAAQ,EAAE,aAAcrE,KAAK,CAACoF,aAAa,CAAC9E,WAAW,EAAE,IAAI;MACjE,CAAC;MACDuE,WAAW,EAAE,MAAM;MACnBQ,eAAe,EAAE;IACrB,CAAC,CAAC;IACFJ,UAAU,EAAErE,IAAI,CAACuE,QAAQ,CAAC/D,KAAK,CAAC6D,UAAU,EAAE;MACxCI,eAAe,EAAE,IAAI;MACrBjB,YAAY,EAAE;QACV,eAAe,EAAE1B,IAAI;QACrB2B,QAAQ,EAAE,aAAcrE,KAAK,CAACoF,aAAa,CAAChF,eAAe,EAAE,IAAI,CAAC;QAClEkF,IAAI,EAAE;MACV,CAAC;MACDT,WAAW,EAAE;IACjB,CAAC,CAAC;IACFC,aAAa;IACb/C,0BAA0B;IAC1B,GAAGM;EACP,CAAC;EACD;EAAgE,MAAM;IAAEkD,WAAW,EAAEC;EAAgB,CAAC,GAAGrB,KAAK,CAACc,UAAU,IAAI,CAAC,CAAC;EAC/H,MAAMQ,qBAAqB,GAAGhF,gBAAgB,CAACD,cAAc,CAACgF,eAAe,EAAGE,KAAK,IAAG;IACpF,IAAIC,mBAAmB;IACvBD,KAAK,CAACE,cAAc,CAAC,CAAC;IACtBzB,KAAK,CAACtB,OAAO,CAAC6C,KAAK,EAAE,CAACvB,KAAK,CAACzB,IAAI,CAAC;IACjC,CAACiD,mBAAmB,GAAG3B,UAAU,CAAC6B,OAAO,MAAM,IAAI,IAAIF,mBAAmB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,mBAAmB,CAACG,KAAK,CAAC,CAAC;EAChI,CAAC,CAAC,CAAC;EACH,IAAI3B,KAAK,CAACc,UAAU,EAAE;IAClBd,KAAK,CAACc,UAAU,CAACM,WAAW,GAAGE,qBAAqB;IACpD;IACA;IACA;IACA;IACA;IACA;IACA,MAAMM,cAAc,GAAG5B,KAAK,CAACc,UAAU,CAAC,YAAY,CAAC,IAAId,KAAK,CAACc,UAAU,CAAC,iBAAiB,CAAC;IAC5F,MAAMe,iBAAiB,GAAG,MAAM,CAAC,CAAC;IAClC,IAAI,CAACD,cAAc,EAAE;MACjB,IAAI3E,KAAK,CAAC,iBAAiB,CAAC,EAAE;QAC1B,IAAI6E,oBAAoB;QACxB,MAAMC,SAAS,GAAG,CAACD,oBAAoB,GAAG9B,KAAK,CAACc,UAAU,CAACP,EAAE,MAAM,IAAI,IAAIuB,oBAAoB,KAAK,KAAK,CAAC,GAAGA,oBAAoB,GAAI,GAAE3C,OAAQ,UAAS;QACxJ,MAAM6C,iBAAiB,GAAI,GAAED,SAAU,IAAG/B,KAAK,CAACK,KAAK,CAAC,iBAAiB,CAAE,EAAC;QAC1EL,KAAK,CAACc,UAAU,CAAC,YAAY,CAAC,GAAGe,iBAAiB;QAClD7B,KAAK,CAACc,UAAU,CAACP,EAAE,GAAGwB,SAAS;QAC/B/B,KAAK,CAACc,UAAU,CAAC,iBAAiB,CAAC,GAAGkB,iBAAiB;MAC3D,CAAC,MAAM,IAAI/E,KAAK,CAAC,YAAY,CAAC,EAAE;QAC5B+C,KAAK,CAACc,UAAU,CAAC,YAAY,CAAC,GAAI,GAAEe,iBAAkB,IAAG5E,KAAK,CAAC,YAAY,CAAE,EAAC;MAClF,CAAC,MAAM;QACH+C,KAAK,CAACc,UAAU,CAAC,YAAY,CAAC,GAAGe,iBAAiB;MACtD;IACJ;EACJ;EACA,MAAMI,oBAAoB,GAAG3F,gBAAgB,CAACD,cAAc,CAAC,CAACc,gBAAgB,GAAG6C,KAAK,CAACe,SAAS,MAAM,IAAI,IAAI5D,gBAAgB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,gBAAgB,CAACiE,WAAW,EAAG3B,EAAE,IAAG;IACrLA,EAAE,CAACgC,cAAc,CAAC,CAAC;EACvB,CAAC,CAAC,CAAC;EACH,MAAMS,gBAAgB,GAAG5F,gBAAgB,CAACD,cAAc,CAAC,CAACe,iBAAiB,GAAG4C,KAAK,CAACe,SAAS,MAAM,IAAI,IAAI3D,iBAAiB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,iBAAiB,CAAC+E,OAAO,EAAG1C,EAAE,IAAG;IAChLpB,cAAc,CAACoB,EAAE,CAAC;EACtB,CAAC,CAAC,CAAC;EACH,IAAIO,KAAK,CAACe,SAAS,EAAE;IACjBf,KAAK,CAACe,SAAS,CAACK,WAAW,GAAGa,oBAAoB;IAClDjC,KAAK,CAACe,SAAS,CAACoB,OAAO,GAAGD,gBAAgB;EAC9C;EACA;EACA,IAAI5D,WAAW,EAAE;IACb0B,KAAK,CAACe,SAAS,GAAGpB,SAAS;EAC/B;EACA,IAAIyC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACvC;IACAzG,KAAK,CAAC0G,SAAS,CAAC,MAAI;MAChB,IAAInE,SAAS,IAAIE,WAAW,EAAE;QAC1B;QACAkE,OAAO,CAACC,KAAK,CAAE,mFAAkF,CAAC;MACtG;IACJ,CAAC,EAAE,CACCrE,SAAS,EACTE,WAAW,CACd,CAAC;EACN;EACA,OAAO0B,KAAK;AAChB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}