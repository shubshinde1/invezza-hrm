{"ast":null,"code":"import * as React from 'react';\nimport { useEventCallback, useControllableState, getIntrinsicElementProps, slot } from '@fluentui/react-utilities';\nimport { useArrowNavigationGroup } from '@fluentui/react-tabster';\n/**\n * Create the state required to render Toolbar.\n *\n * The returned state can be modified with hooks such as useToolbarStyles_unstable,\n * before being passed to renderToolbar_unstable.\n *\n * @param props - props from this instance of Toolbar\n * @param ref - reference to root HTMLElement of Toolbar\n */\nexport const useToolbar_unstable = (props, ref) => {\n  const {\n    size = 'medium',\n    vertical = false\n  } = props;\n  const arrowNavigationProps = useArrowNavigationGroup({\n    circular: true,\n    axis: 'both'\n  });\n  const initialState = {\n    size,\n    vertical,\n    // TODO add appropriate props/defaults\n    components: {\n      // TODO add each slot's element type or component\n      root: 'div'\n    },\n    // TODO add appropriate slots, for example:\n    // mySlot: resolveShorthand(props.mySlot),\n    root: slot.always(getIntrinsicElementProps('div', {\n      role: 'toolbar',\n      // FIXME:\n      // `ref` is wrongly assigned to be `HTMLElement` instead of `HTMLDivElement`\n      // but since it would be a breaking change to fix it, we are casting ref to it's proper type\n      ref: ref,\n      ...(vertical && {\n        'aria-orientation': 'vertical'\n      }),\n      ...arrowNavigationProps,\n      ...props\n    }), {\n      elementType: 'div'\n    })\n  };\n  const [checkedValues, onCheckedValueChange] = useToolbarSelectableState({\n    checkedValues: props.checkedValues,\n    defaultCheckedValues: props.defaultCheckedValues,\n    onCheckedValueChange: props.onCheckedValueChange\n  });\n  const handleToggleButton = useEventCallback((e, name, value, checked) => {\n    if (name && value) {\n      const checkedItems = (checkedValues === null || checkedValues === void 0 ? void 0 : checkedValues[name]) || [];\n      const newCheckedItems = [...checkedItems];\n      if (checked) {\n        newCheckedItems.splice(newCheckedItems.indexOf(value), 1);\n      } else {\n        newCheckedItems.push(value);\n      }\n      onCheckedValueChange === null || onCheckedValueChange === void 0 ? void 0 : onCheckedValueChange(e, {\n        name,\n        checkedItems: newCheckedItems\n      });\n    }\n  });\n  const handleRadio = useEventCallback((e, name, value, checked) => {\n    if (name && value) {\n      onCheckedValueChange === null || onCheckedValueChange === void 0 ? void 0 : onCheckedValueChange(e, {\n        name,\n        checkedItems: [value]\n      });\n    }\n  });\n  return {\n    ...initialState,\n    handleToggleButton,\n    handleRadio,\n    checkedValues: checkedValues !== null && checkedValues !== void 0 ? checkedValues : {}\n  };\n};\n/**\n * Adds appropriate state values and handlers for selectable items\n * i.e checkboxes and radios\n */\nconst useToolbarSelectableState = state => {\n  const [checkedValues, setCheckedValues] = useControllableState({\n    state: state.checkedValues,\n    defaultState: state.defaultCheckedValues,\n    initialState: {}\n  });\n  const {\n    onCheckedValueChange: onCheckedValueChangeOriginal\n  } = state;\n  const onCheckedValueChange = useEventCallback((e, {\n    name,\n    checkedItems\n  }) => {\n    if (onCheckedValueChangeOriginal) {\n      onCheckedValueChangeOriginal(e, {\n        name,\n        checkedItems\n      });\n    }\n    setCheckedValues(s => {\n      return s ? {\n        ...s,\n        [name]: checkedItems\n      } : {\n        [name]: checkedItems\n      };\n    });\n  });\n  return [checkedValues, onCheckedValueChange];\n};","map":{"version":3,"names":["React","useEventCallback","useControllableState","getIntrinsicElementProps","slot","useArrowNavigationGroup","useToolbar_unstable","props","ref","size","vertical","arrowNavigationProps","circular","axis","initialState","components","root","always","role","elementType","checkedValues","onCheckedValueChange","useToolbarSelectableState","defaultCheckedValues","handleToggleButton","e","name","value","checked","checkedItems","newCheckedItems","splice","indexOf","push","handleRadio","state","setCheckedValues","defaultState","onCheckedValueChangeOriginal","s"],"sources":["D:/shubh/invezza-hrm/node_modules/@fluentui/react-toolbar/lib/components/Toolbar/useToolbar.js"],"sourcesContent":["import * as React from 'react';\nimport { useEventCallback, useControllableState, getIntrinsicElementProps, slot } from '@fluentui/react-utilities';\nimport { useArrowNavigationGroup } from '@fluentui/react-tabster';\n/**\n * Create the state required to render Toolbar.\n *\n * The returned state can be modified with hooks such as useToolbarStyles_unstable,\n * before being passed to renderToolbar_unstable.\n *\n * @param props - props from this instance of Toolbar\n * @param ref - reference to root HTMLElement of Toolbar\n */ export const useToolbar_unstable = (props, ref)=>{\n    const { size = 'medium', vertical = false } = props;\n    const arrowNavigationProps = useArrowNavigationGroup({\n        circular: true,\n        axis: 'both'\n    });\n    const initialState = {\n        size,\n        vertical,\n        // TODO add appropriate props/defaults\n        components: {\n            // TODO add each slot's element type or component\n            root: 'div'\n        },\n        // TODO add appropriate slots, for example:\n        // mySlot: resolveShorthand(props.mySlot),\n        root: slot.always(getIntrinsicElementProps('div', {\n            role: 'toolbar',\n            // FIXME:\n            // `ref` is wrongly assigned to be `HTMLElement` instead of `HTMLDivElement`\n            // but since it would be a breaking change to fix it, we are casting ref to it's proper type\n            ref: ref,\n            ...vertical && {\n                'aria-orientation': 'vertical'\n            },\n            ...arrowNavigationProps,\n            ...props\n        }), {\n            elementType: 'div'\n        })\n    };\n    const [checkedValues, onCheckedValueChange] = useToolbarSelectableState({\n        checkedValues: props.checkedValues,\n        defaultCheckedValues: props.defaultCheckedValues,\n        onCheckedValueChange: props.onCheckedValueChange\n    });\n    const handleToggleButton = useEventCallback((e, name, value, checked)=>{\n        if (name && value) {\n            const checkedItems = (checkedValues === null || checkedValues === void 0 ? void 0 : checkedValues[name]) || [];\n            const newCheckedItems = [\n                ...checkedItems\n            ];\n            if (checked) {\n                newCheckedItems.splice(newCheckedItems.indexOf(value), 1);\n            } else {\n                newCheckedItems.push(value);\n            }\n            onCheckedValueChange === null || onCheckedValueChange === void 0 ? void 0 : onCheckedValueChange(e, {\n                name,\n                checkedItems: newCheckedItems\n            });\n        }\n    });\n    const handleRadio = useEventCallback((e, name, value, checked)=>{\n        if (name && value) {\n            onCheckedValueChange === null || onCheckedValueChange === void 0 ? void 0 : onCheckedValueChange(e, {\n                name,\n                checkedItems: [\n                    value\n                ]\n            });\n        }\n    });\n    return {\n        ...initialState,\n        handleToggleButton,\n        handleRadio,\n        checkedValues: checkedValues !== null && checkedValues !== void 0 ? checkedValues : {}\n    };\n};\n/**\n * Adds appropriate state values and handlers for selectable items\n * i.e checkboxes and radios\n */ const useToolbarSelectableState = (state)=>{\n    const [checkedValues, setCheckedValues] = useControllableState({\n        state: state.checkedValues,\n        defaultState: state.defaultCheckedValues,\n        initialState: {}\n    });\n    const { onCheckedValueChange: onCheckedValueChangeOriginal } = state;\n    const onCheckedValueChange = useEventCallback((e, { name, checkedItems })=>{\n        if (onCheckedValueChangeOriginal) {\n            onCheckedValueChangeOriginal(e, {\n                name,\n                checkedItems\n            });\n        }\n        setCheckedValues((s)=>{\n            return s ? {\n                ...s,\n                [name]: checkedItems\n            } : {\n                [name]: checkedItems\n            };\n        });\n    });\n    return [\n        checkedValues,\n        onCheckedValueChange\n    ];\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}