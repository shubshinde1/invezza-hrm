{"ast":null,"code":"import * as React from 'react';\nimport { getIntrinsicElementProps, slot } from '@fluentui/react-utilities';\nimport { useSkeletonContext } from '../../contexts/SkeletonContext';\n/**\n * Create the state required to render SkeletonItem.\n *\n * The returned state can be modified with hooks such as useSkeletonItemStyles_unstable,\n * before being passed to renderSkeletonItem_unstable.\n *\n * @param props - props from this instance of SkeletonItem\n * @param ref - reference to root HTMLElement of SkeletonItem\n */\nexport const useSkeletonItem_unstable = (props, ref) => {\n  const {\n    animation: contextAnimation,\n    appearance: contextAppearance\n  } = useSkeletonContext();\n  const {\n    animation = contextAnimation !== null && contextAnimation !== void 0 ? contextAnimation : 'wave',\n    appearance = contextAppearance !== null && contextAppearance !== void 0 ? contextAppearance : 'opaque',\n    size = 16,\n    shape = 'rectangle'\n  } = props;\n  const root = slot.always(getIntrinsicElementProps('div', {\n    // FIXME:\n    // `ref` is wrongly assigned to be `HTMLElement` instead of `HTMLDivElement`\n    // but since it would be a breaking change to fix it, we are casting ref to it's proper type\n    ref: ref,\n    ...props\n  }), {\n    elementType: 'div'\n  });\n  return {\n    appearance,\n    animation,\n    size,\n    shape,\n    components: {\n      root: 'div'\n    },\n    root\n  };\n};","map":{"version":3,"names":["React","getIntrinsicElementProps","slot","useSkeletonContext","useSkeletonItem_unstable","props","ref","animation","contextAnimation","appearance","contextAppearance","size","shape","root","always","elementType","components"],"sources":["D:/shubh/invezza-hrm/node_modules/@fluentui/react-skeleton/lib/components/SkeletonItem/useSkeletonItem.js"],"sourcesContent":["import * as React from 'react';\nimport { getIntrinsicElementProps, slot } from '@fluentui/react-utilities';\nimport { useSkeletonContext } from '../../contexts/SkeletonContext';\n/**\n * Create the state required to render SkeletonItem.\n *\n * The returned state can be modified with hooks such as useSkeletonItemStyles_unstable,\n * before being passed to renderSkeletonItem_unstable.\n *\n * @param props - props from this instance of SkeletonItem\n * @param ref - reference to root HTMLElement of SkeletonItem\n */ export const useSkeletonItem_unstable = (props, ref)=>{\n    const { animation: contextAnimation, appearance: contextAppearance } = useSkeletonContext();\n    const { animation = contextAnimation !== null && contextAnimation !== void 0 ? contextAnimation : 'wave', appearance = contextAppearance !== null && contextAppearance !== void 0 ? contextAppearance : 'opaque', size = 16, shape = 'rectangle' } = props;\n    const root = slot.always(getIntrinsicElementProps('div', {\n        // FIXME:\n        // `ref` is wrongly assigned to be `HTMLElement` instead of `HTMLDivElement`\n        // but since it would be a breaking change to fix it, we are casting ref to it's proper type\n        ref: ref,\n        ...props\n    }), {\n        elementType: 'div'\n    });\n    return {\n        appearance,\n        animation,\n        size,\n        shape,\n        components: {\n            root: 'div'\n        },\n        root\n    };\n};\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,wBAAwB,EAAEC,IAAI,QAAQ,2BAA2B;AAC1E,SAASC,kBAAkB,QAAQ,gCAAgC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAI,OAAO,MAAMC,wBAAwB,GAAGA,CAACC,KAAK,EAAEC,GAAG,KAAG;EACtD,MAAM;IAAEC,SAAS,EAAEC,gBAAgB;IAAEC,UAAU,EAAEC;EAAkB,CAAC,GAAGP,kBAAkB,CAAC,CAAC;EAC3F,MAAM;IAAEI,SAAS,GAAGC,gBAAgB,KAAK,IAAI,IAAIA,gBAAgB,KAAK,KAAK,CAAC,GAAGA,gBAAgB,GAAG,MAAM;IAAEC,UAAU,GAAGC,iBAAiB,KAAK,IAAI,IAAIA,iBAAiB,KAAK,KAAK,CAAC,GAAGA,iBAAiB,GAAG,QAAQ;IAAEC,IAAI,GAAG,EAAE;IAAEC,KAAK,GAAG;EAAY,CAAC,GAAGP,KAAK;EAC1P,MAAMQ,IAAI,GAAGX,IAAI,CAACY,MAAM,CAACb,wBAAwB,CAAC,KAAK,EAAE;IACrD;IACA;IACA;IACAK,GAAG,EAAEA,GAAG;IACR,GAAGD;EACP,CAAC,CAAC,EAAE;IACAU,WAAW,EAAE;EACjB,CAAC,CAAC;EACF,OAAO;IACHN,UAAU;IACVF,SAAS;IACTI,IAAI;IACJC,KAAK;IACLI,UAAU,EAAE;MACRH,IAAI,EAAE;IACV,CAAC;IACDA;EACJ,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}