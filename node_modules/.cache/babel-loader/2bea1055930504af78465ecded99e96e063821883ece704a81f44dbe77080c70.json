{"ast":null,"code":"import * as React from 'react';\nimport { useTimeout, mergeCallbacks } from '@fluentui/react-utilities';\nimport { useTriggerSlot } from '../../utils/useTriggerSlot';\nimport { getDropdownActionFromKey } from '../../utils/dropdownKeyActions';\n/*\n * useButtonTriggerSlot returns a tuple of trigger/listbox shorthand,\n * with the semantics and event handlers needed for the Combobox and Dropdown components.\n * The element type of the ref should always match the element type used in the trigger shorthand.\n */\nexport function useButtonTriggerSlot(triggerFromProps, ref, options) {\n  const {\n    state: {\n      open,\n      setOpen,\n      getOptionById\n    },\n    defaultProps,\n    activeDescendantController\n  } = options;\n  // jump to matching option based on typing\n  const searchString = React.useRef('');\n  const [setKeyTimeout, clearKeyTimeout] = useTimeout();\n  const moveToNextMatchingOption = (matcher, opt = {\n    startFromNext: false\n  }) => {\n    const {\n      startFromNext\n    } = opt;\n    const activeOptionId = activeDescendantController.active();\n    const nextInOrder = activeDescendantController.find(id => {\n      const option = getOptionById(id);\n      return !!option && matcher(option.text);\n    }, {\n      startFrom: startFromNext ? activeDescendantController.next({\n        passive: true\n      }) : activeOptionId\n    });\n    if (nextInOrder) {\n      return nextInOrder;\n    }\n    // Cycle back to first match\n    return activeDescendantController.find(id => {\n      const option = getOptionById(id);\n      return !!option && matcher(option.text);\n    });\n  };\n  const moveToNextMatchingOptionWithSameCharacterHandling = () => {\n    if (moveToNextMatchingOption(optionText => {\n      return optionText.toLocaleLowerCase().indexOf(searchString.current) === 0;\n    }, {\n      // Slowly pressing the same key will cycle through options\n      startFromNext: searchString.current.length === 1\n    })) {\n      return;\n    }\n    // if there are no direct matches, check if the search is all the same letter, e.g. \"aaa\"\n    if (allCharactersSame(searchString.current) && moveToNextMatchingOption(optionText => {\n      return optionText.toLocaleLowerCase().indexOf(searchString.current[0]) === 0;\n    }, {\n      // if the search is all the same letter, cycle through options starting with that letter\n      startFromNext: true\n    })) {\n      return;\n    }\n    activeDescendantController.blur();\n  };\n  const onTriggerKeyDown = ev => {\n    // clear timeout, if it exists\n    clearKeyTimeout();\n    // if the key was a char key, update search string\n    if (getDropdownActionFromKey(ev) === 'Type') {\n      // update search string\n      searchString.current += ev.key.toLowerCase();\n      setKeyTimeout(() => {\n        searchString.current = '';\n      }, 500);\n      // update state\n      !open && setOpen(ev, true);\n      moveToNextMatchingOptionWithSameCharacterHandling();\n    }\n  };\n  const trigger = useTriggerSlot(triggerFromProps, ref, {\n    state: options.state,\n    defaultProps,\n    elementType: 'button',\n    activeDescendantController\n  });\n  trigger.onKeyDown = mergeCallbacks(onTriggerKeyDown, trigger.onKeyDown);\n  return trigger;\n}\n/**\n * @returns - whether every character in the string is the same\n */\nfunction allCharactersSame(str) {\n  for (let i = 1; i < str.length; i++) {\n    if (str[i] !== str[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n}","map":{"version":3,"names":["React","useTimeout","mergeCallbacks","useTriggerSlot","getDropdownActionFromKey","useButtonTriggerSlot","triggerFromProps","ref","options","state","open","setOpen","getOptionById","defaultProps","activeDescendantController","searchString","useRef","setKeyTimeout","clearKeyTimeout","moveToNextMatchingOption","matcher","opt","startFromNext","activeOptionId","active","nextInOrder","find","id","option","text","startFrom","next","passive","moveToNextMatchingOptionWithSameCharacterHandling","optionText","toLocaleLowerCase","indexOf","current","length","allCharactersSame","blur","onTriggerKeyDown","ev","key","toLowerCase","trigger","elementType","onKeyDown","str","i"],"sources":["D:/shubh/invezza-hrm/node_modules/@fluentui/react-combobox/lib/components/Dropdown/useButtonTriggerSlot.js"],"sourcesContent":["import * as React from 'react';\nimport { useTimeout, mergeCallbacks } from '@fluentui/react-utilities';\nimport { useTriggerSlot } from '../../utils/useTriggerSlot';\nimport { getDropdownActionFromKey } from '../../utils/dropdownKeyActions';\n/*\n * useButtonTriggerSlot returns a tuple of trigger/listbox shorthand,\n * with the semantics and event handlers needed for the Combobox and Dropdown components.\n * The element type of the ref should always match the element type used in the trigger shorthand.\n */ export function useButtonTriggerSlot(triggerFromProps, ref, options) {\n    const { state: { open, setOpen, getOptionById }, defaultProps, activeDescendantController } = options;\n    // jump to matching option based on typing\n    const searchString = React.useRef('');\n    const [setKeyTimeout, clearKeyTimeout] = useTimeout();\n    const moveToNextMatchingOption = (matcher, opt = {\n        startFromNext: false\n    })=>{\n        const { startFromNext } = opt;\n        const activeOptionId = activeDescendantController.active();\n        const nextInOrder = activeDescendantController.find((id)=>{\n            const option = getOptionById(id);\n            return !!option && matcher(option.text);\n        }, {\n            startFrom: startFromNext ? activeDescendantController.next({\n                passive: true\n            }) : activeOptionId\n        });\n        if (nextInOrder) {\n            return nextInOrder;\n        }\n        // Cycle back to first match\n        return activeDescendantController.find((id)=>{\n            const option = getOptionById(id);\n            return !!option && matcher(option.text);\n        });\n    };\n    const moveToNextMatchingOptionWithSameCharacterHandling = ()=>{\n        if (moveToNextMatchingOption((optionText)=>{\n            return optionText.toLocaleLowerCase().indexOf(searchString.current) === 0;\n        }, {\n            // Slowly pressing the same key will cycle through options\n            startFromNext: searchString.current.length === 1\n        })) {\n            return;\n        }\n        // if there are no direct matches, check if the search is all the same letter, e.g. \"aaa\"\n        if (allCharactersSame(searchString.current) && moveToNextMatchingOption((optionText)=>{\n            return optionText.toLocaleLowerCase().indexOf(searchString.current[0]) === 0;\n        }, {\n            // if the search is all the same letter, cycle through options starting with that letter\n            startFromNext: true\n        })) {\n            return;\n        }\n        activeDescendantController.blur();\n    };\n    const onTriggerKeyDown = (ev)=>{\n        // clear timeout, if it exists\n        clearKeyTimeout();\n        // if the key was a char key, update search string\n        if (getDropdownActionFromKey(ev) === 'Type') {\n            // update search string\n            searchString.current += ev.key.toLowerCase();\n            setKeyTimeout(()=>{\n                searchString.current = '';\n            }, 500);\n            // update state\n            !open && setOpen(ev, true);\n            moveToNextMatchingOptionWithSameCharacterHandling();\n        }\n    };\n    const trigger = useTriggerSlot(triggerFromProps, ref, {\n        state: options.state,\n        defaultProps,\n        elementType: 'button',\n        activeDescendantController\n    });\n    trigger.onKeyDown = mergeCallbacks(onTriggerKeyDown, trigger.onKeyDown);\n    return trigger;\n}\n/**\n * @returns - whether every character in the string is the same\n */ function allCharactersSame(str) {\n    for(let i = 1; i < str.length; i++){\n        if (str[i] !== str[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}