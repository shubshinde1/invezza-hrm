{"ast":null,"code":"import { useControllableState } from '@fluentui/react-utilities';\nimport { ImmutableMap } from '../../utils/ImmutableMap';\nimport * as React from 'react';\nimport { createCheckedItems } from '../../utils/createCheckedItems';\nexport function useFlatControllableCheckedItems(props, headlessTree) {\n  return useControllableState({\n    initialState: ImmutableMap.empty,\n    state: React.useMemo(() => props.selectionMode ? props.checkedItems && createCheckedItems(props.checkedItems) : undefined, [props.checkedItems, props.selectionMode]),\n    defaultState: () => initializeCheckedItems(props, headlessTree)\n  });\n}\nexport function createNextFlatCheckedItems(data, previousCheckedItems, headlessTree) {\n  if (data.selectionMode === 'single') {\n    return ImmutableMap.create([[data.value, data.checked]]);\n  }\n  const treeItem = headlessTree.get(data.value);\n  if (!treeItem) {\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.error(`@fluentui/react-tree [useHeadlessFlatTree]:\nTree item ${data.value} not found.`);\n    }\n    return previousCheckedItems;\n  }\n  const nextCheckedItems = new Map(previousCheckedItems);\n  for (const children of headlessTree.subtree(data.value)) {\n    nextCheckedItems.set(children.value, data.checked);\n  }\n  nextCheckedItems.set(data.value, data.checked);\n  let isAncestorsMixed = false;\n  for (const parent of headlessTree.ancestors(treeItem.value)) {\n    // if one parent is mixed, all ancestors are mixed\n    if (isAncestorsMixed) {\n      nextCheckedItems.set(parent.value, 'mixed');\n      continue;\n    }\n    const checkedChildren = [];\n    for (const child of headlessTree.children(parent.value)) {\n      var _nextCheckedItems_get;\n      if (((_nextCheckedItems_get = nextCheckedItems.get(child.value)) !== null && _nextCheckedItems_get !== void 0 ? _nextCheckedItems_get : false) === data.checked) {\n        checkedChildren.push(child);\n      }\n    }\n    if (checkedChildren.length === parent.childrenValues.length) {\n      nextCheckedItems.set(parent.value, data.checked);\n    } else {\n      // if one parent is mixed, all ancestors are mixed\n      isAncestorsMixed = true;\n      nextCheckedItems.set(parent.value, 'mixed');\n    }\n  }\n  return ImmutableMap.dangerouslyCreate_unstable(nextCheckedItems);\n}\nfunction initializeCheckedItems(props, headlessTree) {\n  if (!props.selectionMode) {\n    return ImmutableMap.empty;\n  }\n  let state = createCheckedItems(props.defaultCheckedItems);\n  if (props.selectionMode === 'multiselect') {\n    for (const [value, checked] of state) {\n      state = createNextFlatCheckedItems({\n        value,\n        checked,\n        selectionMode: props.selectionMode\n      }, state, headlessTree);\n    }\n  }\n  return state;\n}","map":{"version":3,"names":["useControllableState","ImmutableMap","React","createCheckedItems","useFlatControllableCheckedItems","props","headlessTree","initialState","empty","state","useMemo","selectionMode","checkedItems","undefined","defaultState","initializeCheckedItems","createNextFlatCheckedItems","data","previousCheckedItems","create","value","checked","treeItem","get","process","env","NODE_ENV","console","error","nextCheckedItems","Map","children","subtree","set","isAncestorsMixed","parent","ancestors","checkedChildren","child","_nextCheckedItems_get","push","length","childrenValues","dangerouslyCreate_unstable","defaultCheckedItems"],"sources":["D:/shubh/invezza-hrm/node_modules/@fluentui/react-tree/lib/components/FlatTree/useFlatControllableCheckedItems.js"],"sourcesContent":["import { useControllableState } from '@fluentui/react-utilities';\nimport { ImmutableMap } from '../../utils/ImmutableMap';\nimport * as React from 'react';\nimport { createCheckedItems } from '../../utils/createCheckedItems';\nexport function useFlatControllableCheckedItems(props, headlessTree) {\n    return useControllableState({\n        initialState: ImmutableMap.empty,\n        state: React.useMemo(()=>props.selectionMode ? props.checkedItems && createCheckedItems(props.checkedItems) : undefined, [\n            props.checkedItems,\n            props.selectionMode\n        ]),\n        defaultState: ()=>initializeCheckedItems(props, headlessTree)\n    });\n}\nexport function createNextFlatCheckedItems(data, previousCheckedItems, headlessTree) {\n    if (data.selectionMode === 'single') {\n        return ImmutableMap.create([\n            [\n                data.value,\n                data.checked\n            ]\n        ]);\n    }\n    const treeItem = headlessTree.get(data.value);\n    if (!treeItem) {\n        if (process.env.NODE_ENV !== 'production') {\n            // eslint-disable-next-line no-console\n            console.error(`@fluentui/react-tree [useHeadlessFlatTree]:\nTree item ${data.value} not found.`);\n        }\n        return previousCheckedItems;\n    }\n    const nextCheckedItems = new Map(previousCheckedItems);\n    for (const children of headlessTree.subtree(data.value)){\n        nextCheckedItems.set(children.value, data.checked);\n    }\n    nextCheckedItems.set(data.value, data.checked);\n    let isAncestorsMixed = false;\n    for (const parent of headlessTree.ancestors(treeItem.value)){\n        // if one parent is mixed, all ancestors are mixed\n        if (isAncestorsMixed) {\n            nextCheckedItems.set(parent.value, 'mixed');\n            continue;\n        }\n        const checkedChildren = [];\n        for (const child of headlessTree.children(parent.value)){\n            var _nextCheckedItems_get;\n            if (((_nextCheckedItems_get = nextCheckedItems.get(child.value)) !== null && _nextCheckedItems_get !== void 0 ? _nextCheckedItems_get : false) === data.checked) {\n                checkedChildren.push(child);\n            }\n        }\n        if (checkedChildren.length === parent.childrenValues.length) {\n            nextCheckedItems.set(parent.value, data.checked);\n        } else {\n            // if one parent is mixed, all ancestors are mixed\n            isAncestorsMixed = true;\n            nextCheckedItems.set(parent.value, 'mixed');\n        }\n    }\n    return ImmutableMap.dangerouslyCreate_unstable(nextCheckedItems);\n}\nfunction initializeCheckedItems(props, headlessTree) {\n    if (!props.selectionMode) {\n        return ImmutableMap.empty;\n    }\n    let state = createCheckedItems(props.defaultCheckedItems);\n    if (props.selectionMode === 'multiselect') {\n        for (const [value, checked] of state){\n            state = createNextFlatCheckedItems({\n                value,\n                checked,\n                selectionMode: props.selectionMode\n            }, state, headlessTree);\n        }\n    }\n    return state;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}