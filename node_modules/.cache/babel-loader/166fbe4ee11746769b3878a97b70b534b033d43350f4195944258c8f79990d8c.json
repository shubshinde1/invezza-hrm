{"ast":null,"code":"import * as React from 'react';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\n/**\n * Provides a way of reporting element width.\n * Returns\n * `width` - current element width (0 by default),\n * `measureElementRef` - a ref function to be passed as `ref` to the element you want to measure\n */\nexport function useMeasureElement() {\n  const [width, setWidth] = React.useState(0);\n  const container = React.useRef(undefined);\n  const {\n    targetDocument\n  } = useFluent();\n  // the handler for resize observer\n  const handleResize = React.useCallback(() => {\n    var _container_current;\n    const containerWidth = (_container_current = container.current) === null || _container_current === void 0 ? void 0 : _container_current.getBoundingClientRect().width;\n    setWidth(containerWidth || 0);\n  }, []);\n  // Keep the reference of ResizeObserver in the state, as it should live through renders\n  const [resizeObserver] = React.useState(() => createResizeObserverFromDocument(targetDocument, handleResize));\n  const measureElementRef = React.useCallback(el => {\n    if (!targetDocument || !resizeObserver) {\n      return;\n    }\n    // cleanup previous container\n    if (container.current) {\n      resizeObserver.unobserve(container.current);\n    }\n    container.current = undefined;\n    if (el === null || el === void 0 ? void 0 : el.parentElement) {\n      container.current = el.parentElement;\n      resizeObserver.observe(container.current);\n      handleResize();\n    }\n  }, [targetDocument, resizeObserver, handleResize]);\n  React.useEffect(() => {\n    return () => resizeObserver === null || resizeObserver === void 0 ? void 0 : resizeObserver.disconnect();\n  }, [resizeObserver]);\n  return {\n    width,\n    measureElementRef\n  };\n}\n/**\n * FIXME - TS 3.8/3.9 don't have ResizeObserver types by default, move this to a shared utility once we bump the minbar\n * A utility method that creates a ResizeObserver from a target document\n * @param targetDocument - document to use to create the ResizeObserver\n * @param callback  - https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/ResizeObserver#callback\n * @returns a ResizeObserver instance or null if the global does not exist on the document\n */\nexport function createResizeObserverFromDocument(targetDocument, callback) {\n  var _targetDocument_defaultView;\n  if (!(targetDocument === null || targetDocument === void 0 ? void 0 : (_targetDocument_defaultView = targetDocument.defaultView) === null || _targetDocument_defaultView === void 0 ? void 0 : _targetDocument_defaultView.ResizeObserver)) {\n    return null;\n  }\n  return new targetDocument.defaultView.ResizeObserver(callback);\n}","map":{"version":3,"names":["React","useFluent_unstable","useFluent","useMeasureElement","width","setWidth","useState","container","useRef","undefined","targetDocument","handleResize","useCallback","_container_current","containerWidth","current","getBoundingClientRect","resizeObserver","createResizeObserverFromDocument","measureElementRef","el","unobserve","parentElement","observe","useEffect","disconnect","callback","_targetDocument_defaultView","defaultView","ResizeObserver"],"sources":["D:/shubh/invezza-hrm/node_modules/@fluentui/react-table/lib/hooks/useMeasureElement.js"],"sourcesContent":["import * as React from 'react';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\n/**\n * Provides a way of reporting element width.\n * Returns\n * `width` - current element width (0 by default),\n * `measureElementRef` - a ref function to be passed as `ref` to the element you want to measure\n */ export function useMeasureElement() {\n    const [width, setWidth] = React.useState(0);\n    const container = React.useRef(undefined);\n    const { targetDocument } = useFluent();\n    // the handler for resize observer\n    const handleResize = React.useCallback(()=>{\n        var _container_current;\n        const containerWidth = (_container_current = container.current) === null || _container_current === void 0 ? void 0 : _container_current.getBoundingClientRect().width;\n        setWidth(containerWidth || 0);\n    }, []);\n    // Keep the reference of ResizeObserver in the state, as it should live through renders\n    const [resizeObserver] = React.useState(()=>createResizeObserverFromDocument(targetDocument, handleResize));\n    const measureElementRef = React.useCallback((el)=>{\n        if (!targetDocument || !resizeObserver) {\n            return;\n        }\n        // cleanup previous container\n        if (container.current) {\n            resizeObserver.unobserve(container.current);\n        }\n        container.current = undefined;\n        if (el === null || el === void 0 ? void 0 : el.parentElement) {\n            container.current = el.parentElement;\n            resizeObserver.observe(container.current);\n            handleResize();\n        }\n    }, [\n        targetDocument,\n        resizeObserver,\n        handleResize\n    ]);\n    React.useEffect(()=>{\n        return ()=>resizeObserver === null || resizeObserver === void 0 ? void 0 : resizeObserver.disconnect();\n    }, [\n        resizeObserver\n    ]);\n    return {\n        width,\n        measureElementRef\n    };\n}\n/**\n * FIXME - TS 3.8/3.9 don't have ResizeObserver types by default, move this to a shared utility once we bump the minbar\n * A utility method that creates a ResizeObserver from a target document\n * @param targetDocument - document to use to create the ResizeObserver\n * @param callback  - https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/ResizeObserver#callback\n * @returns a ResizeObserver instance or null if the global does not exist on the document\n */ export function createResizeObserverFromDocument(targetDocument, callback) {\n    var _targetDocument_defaultView;\n    if (!(targetDocument === null || targetDocument === void 0 ? void 0 : (_targetDocument_defaultView = targetDocument.defaultView) === null || _targetDocument_defaultView === void 0 ? void 0 : _targetDocument_defaultView.ResizeObserver)) {\n        return null;\n    }\n    return new targetDocument.defaultView.ResizeObserver(callback);\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,kBAAkB,IAAIC,SAAS,QAAQ,iCAAiC;AACjF;AACA;AACA;AACA;AACA;AACA;AAAI,OAAO,SAASC,iBAAiBA,CAAA,EAAG;EACpC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,KAAK,CAACM,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAMC,SAAS,GAAGP,KAAK,CAACQ,MAAM,CAACC,SAAS,CAAC;EACzC,MAAM;IAAEC;EAAe,CAAC,GAAGR,SAAS,CAAC,CAAC;EACtC;EACA,MAAMS,YAAY,GAAGX,KAAK,CAACY,WAAW,CAAC,MAAI;IACvC,IAAIC,kBAAkB;IACtB,MAAMC,cAAc,GAAG,CAACD,kBAAkB,GAAGN,SAAS,CAACQ,OAAO,MAAM,IAAI,IAAIF,kBAAkB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,kBAAkB,CAACG,qBAAqB,CAAC,CAAC,CAACZ,KAAK;IACrKC,QAAQ,CAACS,cAAc,IAAI,CAAC,CAAC;EACjC,CAAC,EAAE,EAAE,CAAC;EACN;EACA,MAAM,CAACG,cAAc,CAAC,GAAGjB,KAAK,CAACM,QAAQ,CAAC,MAAIY,gCAAgC,CAACR,cAAc,EAAEC,YAAY,CAAC,CAAC;EAC3G,MAAMQ,iBAAiB,GAAGnB,KAAK,CAACY,WAAW,CAAEQ,EAAE,IAAG;IAC9C,IAAI,CAACV,cAAc,IAAI,CAACO,cAAc,EAAE;MACpC;IACJ;IACA;IACA,IAAIV,SAAS,CAACQ,OAAO,EAAE;MACnBE,cAAc,CAACI,SAAS,CAACd,SAAS,CAACQ,OAAO,CAAC;IAC/C;IACAR,SAAS,CAACQ,OAAO,GAAGN,SAAS;IAC7B,IAAIW,EAAE,KAAK,IAAI,IAAIA,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACE,aAAa,EAAE;MAC1Df,SAAS,CAACQ,OAAO,GAAGK,EAAE,CAACE,aAAa;MACpCL,cAAc,CAACM,OAAO,CAAChB,SAAS,CAACQ,OAAO,CAAC;MACzCJ,YAAY,CAAC,CAAC;IAClB;EACJ,CAAC,EAAE,CACCD,cAAc,EACdO,cAAc,EACdN,YAAY,CACf,CAAC;EACFX,KAAK,CAACwB,SAAS,CAAC,MAAI;IAChB,OAAO,MAAIP,cAAc,KAAK,IAAI,IAAIA,cAAc,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,cAAc,CAACQ,UAAU,CAAC,CAAC;EAC1G,CAAC,EAAE,CACCR,cAAc,CACjB,CAAC;EACF,OAAO;IACHb,KAAK;IACLe;EACJ,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAI,OAAO,SAASD,gCAAgCA,CAACR,cAAc,EAAEgB,QAAQ,EAAE;EAC3E,IAAIC,2BAA2B;EAC/B,IAAI,EAAEjB,cAAc,KAAK,IAAI,IAAIA,cAAc,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,CAACiB,2BAA2B,GAAGjB,cAAc,CAACkB,WAAW,MAAM,IAAI,IAAID,2BAA2B,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,2BAA2B,CAACE,cAAc,CAAC,EAAE;IACxO,OAAO,IAAI;EACf;EACA,OAAO,IAAInB,cAAc,CAACkB,WAAW,CAACC,cAAc,CAACH,QAAQ,CAAC;AAClE"},"metadata":{},"sourceType":"module","externalDependencies":[]}